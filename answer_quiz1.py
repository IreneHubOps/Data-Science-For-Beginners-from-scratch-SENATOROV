"""Answers for quiz1."""

#  Как понять, что домашка пришла?\n",
# надо нажать fetch origin - history - смотрим последний коммит (что произошло)\n"
# 2) Как принять домашку?\n",
# Open VS code - homework(hw), смотрим домашку, делаем ее
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?\n",
#    Где брать ссылку на коммит? куда её отправлять?\n",
# 4) Что такое файл лога? \n",
#    это краткое содержание урока, которое нужно отправить после окончания урока\n",
# "\n"
# 4.1 Когда нужно его пушить?\n",
#   после окончания урока\n",
# 5) Что такое интерпретатор? \n",
# интерпретатор - это программа, которая читает и запускает наш код \n",
# 6) Где можно выбрать интерпретатор?\n",
# выбрать наверху VC code интерпретатор
# 7) Что такое модуль? \n",
# любое приложение, которое можно опубликовать, версионировать, импортировать или скачать \n",
# 8) Как создать и отправить коммит?\n",
# Заходим в кошку, выбираем наши файлы, пишем заголовок для отправки коммит, нажимаем Commit to main и Push origin
# 9) Как посмотреть что коммит точно отправлен и находится в github?\n",
# Заходим в history, проверяем, что отправили коммит - View in GitHub, забираем ссылку на коммит и отправляем в \n",
# телеграм Homework, пишем commit отдал и ссылку на коммит\n",
# 10) Какая команда показывает что код не прошёл проверки на ошибки? \n",
#   линтеры — инструменты, контролирующие оформление кода в проекте. Именно они помогают поддерживать его чистоту,\n",
#  предотвращать создание коммитов, которые могут содержать ошибки.   \n",
# 10.1 Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.\n",
#   Pylint  - analyses your code without actually running it. It checks for errors, enforces a coding standard, \n",
#   looks for code smells, and can make suggestions about how the code could be refactored.\n",
#   Pydocstyle - is a static analysis tool for checking compliance with Python docstring conventions.\n",
#   Flake8 инструмент, позволяющий просканировать код проекта и обнаружить в нем стилистические ошибки \n",
#    и нарушения различных конвенций кода на Python.\n",
#   Mypy - нахождение багов, которые не подстать обычным линтерам. Позволяет отлавливать ошибки до их появления в runtime, \n",
#   получать более надежный и читабельный код.\n",
# 11) Как узнать какой именно линтере прошёл проверку?\n",
# секция с ячейкой ошибки и наименованием линтера подсвечивается красным \n",
# 12) Линтер Pylint видит markdown?\n",
# нет, если после маркдаун - в vc code будет расхождение \n",
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае? \n",
# имя секции - номер ячейки - код ошибки \n",
# 14) Где посмотреть номер ячейки в vscode?\n",
#   Внизу VC code указаны номера ячеек sell\n",
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?\n",
# в формате JSON\n",
# 16) Где посмотреть в какой ячейке ошибка?\n",
# 17) Как запустить терминал?\n",
# в VC code есть кнопка терминал, на нее нажимаем, терминал запустился\n",
# 18) Что такое линтер?\n",
# это статический анализатор кода, который указывает на “подозрительные” участки \n",
# программы и тем самым помогает программисту писать более качественный код.\n",
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?\n",
# заходим на сайт pylint - код ошибки \n",
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?\n",
# pylint\n",
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?\n",
# Описание - какая информация в модуле\n",
# 21) С какой  git команды начинается утро программиста?\n",
# Fetch origin\n",
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?\n",
# в левом верхнем углу нажать на три точки, появится меню\n",
# 23) Что такое stash?  \n",
#   Общее объяснение концепции.\n",
#   буфер обмена (локальное хранилище)- , возникает, когда работаем одновременно в одном файле\n",
#  стэш это буфер куда мы временно прячем файлы, чтобы принять pull \n",
# 23.1 Как сохранить стэш?\n",
#   git stash\n",
#   Кнопка в vs code\n",
# 23.2 Как восстановить стэш?: \n",
# git stash pop \n",
# 23.3 Различие между стэшем и коммитом.  \n",
# Команда git stash сохраняет неподтвержденные изменения (индексированные и неиндексированные) в отдельном хранилище,\n",
# чтобы вы могли вернуться к ним позже.\n",
# Коммиты — основные конструктивные элементы временной шкалы проекта Git. \n",
# Их можно рассматривать как снимки состояния или контрольные точки на временной шкале проекта Git.\n",
#   Когда лучше сохранить изменения в стэше, а когда коммитить.\n",
#   команда git commit делает для проекта снимок текущего состояния изменений, добавленных в раздел проиндексированных файлов. \n",
#   Команда git stash позволяет на время «сдать в архив» (или отложить) изменения, сделанные в рабочей копии, чтобы вы могли применить их \n",позже. Откладывание изменений полезно, если вам необходимо переключить контекст и вы пока не готовы к созданию коммита.\n",
# 23.4 Как просмотреть список сохраненных стэшей?  \n",
#   git stash list \n",
# 23.5 Как удалить стэш? \n",
#   Команды для удаления отдельных стэшей или всех сразу.\n",
#  git stash clear  - удалит все сразу\n",
#  git stash drop  - удалит последний сохраненный\n",
#  git stash drop stash@{NUMBER} - очистить определенный стеш по номеру\n",
# 23.6 Практические примеры использования стэша. \n",
#   Краткие сценарии, где стэш помогает.\n",
#   - ситуации, когда меняется контекст и надо срочно переключиться\n",
#   - Резервное копирование изменений перед merge или rebase\n",
#   git stash push -m "Резервная копия перед слиянием веток"\n",
#   - Механизм Stash также может быть полезен для работы с неотладочными изменениями, \n",
#   такими как временные исправления, комментарии или форматирование кода.\n",
# 24) Где посмотреть что есть конфликт в файлах? \n",
# git status \n",
# 24.1 Когда он появляется?\n",
# конфликт слияния вызывается конкурирующими изменениями строк\n",
# 25) Как решить конфликт в файлах?\n",
# git log --merge будет создан журнал со списком конфликтов коммитов между ветками, для которых выполняется слияние.\n",
# git diff  помогает найти различия между состояниями репозитория/файлов. Она полезна для выявления и предупреждения конфликтов слияния.\n",
# Чтобы разрешить конфликт слияния, вызванный конкурирующими изменениями строк, необходимо выбрать, \n",
# какие изменения из разных ветвей включить в новую фиксацию.\n",
# 26) Напишиие правильное утверждение \n",
# -Зелёное то что пришло с гитхаба и синее локальные изменения \n",
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? \n",
# 27.1 Что может произойти когда stash восстановите после принятия pull? \n",
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.\n",
# 2 - автоматически и вручную \n",
# 29) Что делает кнопка complete merge? \n",
# 30) В какой чат нужно писать если остались вопросы? \n",
# HELP ME \n",
# 31) Что такое FORK? Зачем его делают? \n",
# копируем чужой репозиторий и делаем его личным \n",
# 32) Как скачать форкнутый репозиторий на локальный компьютер? \n",
# в кошке делаем clone repository, выбираем из списка , который скопировали \n",
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил? \n",
# с большой, другие студенты \n",
# 34) Как создать файл в vs code? \n",
# 35) Файл лога нужно заполнять в конце каждого урока? \n",
# да \n",
#
