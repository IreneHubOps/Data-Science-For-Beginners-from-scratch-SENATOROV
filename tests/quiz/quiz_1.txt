Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(ОПЦИОНАЛЬНО)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
- В чате HomeWork появилось сообщение с моим ником "Прими пулл"
2) Как принять домашку?
- Заходим в кошечку, нажимаем на кнопку Fetch/Pull origin
3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
При нажатий на history появляется меню, которое редлагает набор действий, которые можно выполнить с выбранным коммитом. Вот действия:
- Reset to commit... - возвращает проект к выбранному коммиту, удаляя все изменения после него.
- Checkout commit... - позволяет переключиться на выбранный коммит или создать новую ветку с этого состояния.
- Reorder commit: - меняет порядок коммитов в истории.
- Revert changes in commit: - создает новый коммит, отменяющий изменения из выбранного коммита.
- Create branch from commit: - создает новую ветку, начиная с выбранного коммита.
- Create Tag...: - добавляет метку (tag) к выбранному коммиту.
= Cherry-pick commit...: - применяет изменения из одного коммита в текущую ветку.
- Copy SHA: - копирует уникальный идентификатор коммита.
- Copy tag: - копирует имя метки, связанной с коммитом.
- View on GitHub: - открывает выбранный коммит в веб-интерфейсе GitHub.

3.1) Где брать ссылку на коммит? куда её отправлять? 
Нажимаем в разделе history на правую кнопку мыши и View on GitHub, коммит отобразиться в гитхаб, теперь нужно просто копировать url коммита

4) Что такое файл лога? 
Файл, который заполняем в конце каждого урока, должен содержать тему, дату, описание урока. 
4.1) Когда нужно его пушить?
После каждого урока
5) Что такое интерпритатор? 
Интерпритатор - программа, которая выполняет инструкции, написанные на ЯП например на пайтон.В отличие от компилятора интерпретатор предварительно не переводит ?( компилирует) код в машинный.
6) Где можно выбрать интерпритатор?
Существует 7 интерпретации языка пайтон. Можно скачать в гитхаб. Скопировать путь до exeшника и открыть  файл с кодом. Для этого заходим в консоль вставляем путь exeшника и файла с кодом. Либо в VS code выбираем нужный нам интепретатор.
7) Что такое модуль? 
Файл, содержащий код на языке Python, который можно импортировать и использовать в других программах. Есть много много модулей, н-р math, os, sys
8) Как создать и отправить коммит?
git add <файл>     Добавить конкретный файл
git add .          Добавить все файлы
git commit -m 'Описание коммита'
git push origin <ветка>
9) Как посмотреть что коммит точно отправлен и находится в github?
Заходим в репозитории в гитхаб, выбираем ветку, и справой стороны есть кнопка "Commits", именно здесь отображаются все коммиты.
10) Какая команда показывает что код не прошёл проверки на ошибки? 
pre-commit run --all-files
10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
1. mypy - проверяет типы данных в коде
2. pylint - суровый линтер, который анализирует код на ошибки, стилистические проблемы и улучшения (глубже, чем flake8)
3. flake8 - проверяет код на ошибки, несоответствие PEP 8 и потенциальные баги
4. black - форматирует код по строгим стилевым правилам (отступы, длина строк и т.д.)
11) Как узнать какой именно линтер не прошёл проверку?
при вводе pre-commit run --all-files, отображается список линтеров и состояние. Если выходит красным и Failed, то не прошел.
12) Линтер Pylint видит markdown?
Нет, этот линтер проверяет код python, а ячейки markdown игнорирует.
13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
Да, может отличаться, происходит при работе с markdown и ipynb.
14) Где посмотреть номер ячейки в vscode?
Можно посмотреть в правом нижнем углу, бонусом видно сколько ячеек вообще существует.
15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
файл .ipynb в гитхаб, хранится как текстовый файл, содержащий данные в формате JSON. 
16) Где посмотреть в какой ячейке ошибка?
Прямо под ячейкой ошибки будут светиться красным + при вводе pre-commit run --all-files, рядом с линтером вы увидете сообщение об ошибке
17) Как запустить терминал?
В левом верхем углу Terminal -> New Terminal
18) Что такое линтер?
Программа, которая проверяет код на соответвие  общим требованиям. Помогает выявить баги, улучшать читаемость кода и следовать стандартам кодирования, таким как PEP 8
19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
https://pylint.pycqa.org
20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
flake8
21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
Такая текстовая информация, которая обычно содержится в докстринге (docstring) модуля, и предоставляет краткое объяснение о том, что делает этот модуль и какие функции или классы он содержит.
21) С какой  git команды начинается утро программиста?
Git pull
22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
Название репы -> Правая кнопка мыши -> Open in VS
23) Что такое stash?  Stash - это функция Git, которая позволяет временно сохранить незакоммиченные изменения в локальной директории в буфер.
Чтобы принять pull, сихронизировать изменения полученные с удаленного репозитория и помогает сохранить недавние изменения локального репозитория.
23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 
git stash - сохранит незакоммиченные изменения в буфер.
git stash list - отобразит список сохраненных стешов.
  Кнопка в vs code:
Чтобы принять пулл из интернета, при возникновении конфликта - Accept Current Change, если и локальные и удаленные изменения то - Accept Both Changes
23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
git stash apply - восстановит последний стэш, но он не удалиться из буфера
git stash apply stash@{n} - применит стэш с определенным индексом, n - индекс.
git stash pop - применит стэш и удалит из буфера изменения. Это как комбинация команд git stash apply && git stash drop

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.
Стэш лучше применить, когда нужно переключиться на другую задачу, но так чтоб не потерять последние изменения, например при приеме pull. Это временное пространство куда сохраняем изменения, можно сохранить в стэш, восстановить, доделать и закоммитить.
Коммить лучше, в тех случаях когда нет конфликтов между репозиториями и мы уверены в том, что действительно хотим отправить результаты в git.
23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
git stash list
23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
git stash drop stash@{n} - для отдельных стешей, где n - индекс стеша.
git stash clear - удалит всех сразу.
23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.
Принятия pull
git stash
git pull
git stash pop
Это поможет избежать конфликтов между репозиториями и сихронизирует их.
Если рабочий день закончился, но мусорить коммиты не хочется, можно сохранить как стеш
git stash push -m "незаконченный класс Personality" - сохраним в конце дня.
git stash pop или git stash apply - восстановим и продолжим работать над таской.

24) Где посмотреть что есть конфликт в файлах? 
В терминале вводим git status
24.1) Когда он появляется?
Появлется, в том случаем когда контрибьюторы работают одновременно. Один захотел отправить коммит, но тут приходит пулл.
25) Как решить конфликт в файлах?
Возник конфликт.
    В кошке:
    1. Save changes and continue 
    2. Stashed Changes и восстановить локал изменения -> Restore. И открываем файл в котором были измения в VS code.
    VS code:
    1. Accept Current Change - принять изменения из удаленного репозитория
    2. Accept Incoming Change - принять изменения локальные
    3. Accept Both Changes - и то, и другое.

    
26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения.
Ответ: Зеленое то что пришло с гитхаба, а синее локальные изменения
27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 
Конечно да
27.1) Что может произойти когда stash восстановите после принятия pull?
Могут произойти конфликты, особенное если изменения были в одном файле.
28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
    1. Accept Current Change - принять изменения из удаленного репозитория
    2. Accept Incoming Change - принять изменения локальные
    3. Accept Both Changes - и то, и другое.
29) Что делает кнопка complete merge?
Complete Merge -  помогает завершить слияние после того, как разрешили все конфликты, и git автоматически добавит коммит слияния.
30) В какой чат нужно писать если остались вопросы?
Helpme или Github
31) Что такое FORK? Зачем его делают? 
Создание копии репозитория у себя, тем самым не трогаем сам репозитории. Мы можем что-то добавить или поменять, далее предложить изменения владельцу сделав пулл реквест
32) Как скачать форкнутый репозиторий на локальный компьютер?
Заходим в репу, нажимаем на code, Open with Github Desktop
33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
С вероятностью 80-90% решены в HelpMe, по видеочату или текстом. Либо сам Руслан или другие коллеги
34) Как создать файл в vs code?
Нажать на название репозитория, отобразятся иконки, нажимаем на иконку ввиде бумаги с изогнутым углом. Даем название файлу и вуаля.
35) Файл лога нужно заполнять в конце каждого урока?
Да
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 
2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
3) Почему расширение py лучше чем ipynb?
4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/
Общие правила для всех, кто пишет код на пайтон. Для того чтобы код был чистым.
4.1) линтеры проверяют на соблюдение pep8?
Да, выше перечислила какие из них проверяют.
4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
snake_case
4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
Да, например в циклах
4.4) Зачем и где мы используем андерскор _ 
для разделения слов в именах переменных и функций
4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
Да, если программа маленькая. В больших/средних проектах строго используем понятные и читабельные переменные. Да в целом лучше привыкать нормально называть переменные.


