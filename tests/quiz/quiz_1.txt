Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(ОПЦИОНАЛЬНО)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
В чате ТГ HomeWork будет указан ник и "прими пул".
https://youtu.be/hW_7hodGxVU?si=UUeXqWkJNiFHX4aQ&t=6

2) Как принять домашку?
Открыть GitHub Desktop, нажать на кнопку "pull origin", затем "fetch origin".
 Смотрим History, изучаем все изменения, сама домашка находится в файле 
 hw.txt. Открываем репозиторий в vs code (скорее уж в Курсоре), создаем файлы lesson_номерДЗ_.ipynb и файл log.ipynb. В файле лога ставим дату, выбираем тип "маркдаун", пишем, что учили/делали на уроке (что запомнили).
https://youtu.be/hW_7hodGxVU?si=UUeXqWkJNiFHX4aQ&t=16

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
В history отображаются коммиты.
При нажатии правой кнопкой, в частности, появляется функция "View on GitHub"
https://youtu.be/hW_7hodGxVU?si=B3wq8_ydS0-J91Qx&t=865

3.1) Где брать ссылку на коммит? куда её отправлять?
После перехода на Гитхаб из адресной строки браузера. Отправлять в чат ТГ. В видео говорится, что нужно отправлять в чат HomeWork. Однако, насколько я понимаю, сейчас нужно писать в чат Flood.
https://youtu.be/hW_7hodGxVU?si=N0gmlJv4sMv84pw9&t=882

4) Что такое файл лога? 
Лог — это файл, в котором мы пишем, что делали на уроке.
4.1) Когда нужно его пушить?
Всегда, когда делаем домашку.

5) Что такое интерпритатор? 
Интерпретатор — это программа, которая выполняет код (если правильно помню, то в отличие от компилятора, код выполняется построчно). В нашем случае мы выбираем Python обязательно из каталога Anaconda.
https://youtu.be/hW_7hodGxVU?si=i-xXCsNVNFD5fKJb&t=194

6) Где можно выбрать интерпритатор?
Интерпретатор можно выбрать в настройках Курсора, а также не заходя в настройки в верхней части экрана (выпадающий список появится при первом запуске, если интерпретатор не выбран) или справа над рабочим полем файла.
https://youtu.be/hW_7hodGxVU?si=9_k8me3ChO9cddcV&t=189

7) Что такое модуль?
Модуль — это файл с расширением .py (для Питона), содержащий код. Модули позволяют организовывать код. 
https://youtu.be/hW_7hodGxVU?si=WgcNGFTkTzC9uwy9&t=590

8) Как создать и отправить коммит?
В GitDesktop в левом нижнем углу пишем название коммита (название должно отражать наши действия). Нажимаем "Commit to main" и "Push origin".
https://youtu.be/hW_7hodGxVU?si=o1L7v7Ji1HatIKpJ&t=219

9) Как посмотреть что коммит точно отправлен и находится в github?
- На GitHub в репозитории
- git log --oneline - посмотреть историю коммитов
- git status - убедиться, что нет неотправленных изменений
https://youtu.be/hW_7hodGxVU?si=s01lFcC9hCcntTT4&t=258

10) Какая команда показывает что код не прошёл проверки на ошибки?
Команда pre-commit run --all-files. Либо при нажатии "Commit to main" отображается окно с ошибкой.
https://youtu.be/hW_7hodGxVU?si=syxrcrKeEuWEYYBN&t=323

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
- pylint: проверяет стиль кода и находит программные ошибки
- pydocstyle: проверяет документацию ("более злой, чем пайлинт для докстрингов")
- flake8: проверяет на соответствие PEP 8
- black: форматирует код
- isort: сортирует импорты

11) Как узнать какой именно линтер не прошёл проверку?
В выводе pre-commit явно указывается какой линтер Failed. Например: "pylint...Failed"
https://youtu.be/hW_7hodGxVU?si=E8UO9rUIk0obG6FB&t=425

12) Линтер Pylint видит markdown?
Нет, Pylint проверяет только Python-код, markdown-ячейки игнорируются.
https://youtu.be/hW_7hodGxVU?si=0OgN8MWXr-3S6cNx&t=465

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
Если есть ячейки в формате markdown — их линтер не видит.
https://youtu.be/hW_7hodGxVU?si=0OgN8MWXr-3S6cNx&t=465

14) Где посмотреть номер ячейки в vscode?
В меню Cell (правый нижний угол)
https://youtu.be/hW_7hodGxVU?si=0OgN8MWXr-3S6cNx&t=465

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
ipynb — это JSON-файл, который содержит:
- Исходный код
- Метаданные
- Результаты выполнения
- Форматирование
https://youtu.be/hW_7hodGxVU?si=p63draA2rUJJ0dWq&t=230

16) Где посмотреть в какой ячейке ошибка?
- В логах терминала
https://youtu.be/hW_7hodGxVU?si=0OgN8MWXr-3S6cNx&t=465

17) Как запустить терминал?
В Курсоре и VSCode: Ctrl+` или View -> Terminal или просто Terminal в верхней панели.
https://youtu.be/hW_7hodGxVU?si=vUeyuIOHz-Ac8rRS&t=393

18) Что такое линтер?
Линтер — инструмент статического анализа кода, который проверяет стиль и находит потенциальные ошибки без выполнения кода.

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
- pylint.pycqa.org
https://youtu.be/hW_7hodGxVU?si=I27LQKIbDP0Ah_As&t=434
- в чате HELP ME
https://youtu.be/hW_7hodGxVU?si=nLdAOUUkTa9HWJa6&t=833

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
После исправления pylint.
https://youtu.be/hW_7hodGxVU?si=CiwQvWttOiAp802j&t=677

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
Описание модуля — это docstring в начале файла, который объясняет назначение и содержимое модуля.

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
Нажать правой кнопкой мышки на "Current repository" и выбрать "Open in Visual Studio Code"
https://youtu.be/hW_7hodGxVU?si=CwHRj1b6D0rfDH7-&t=920

23) Что такое stash?
Stash — это временное хранилище изменений, которые мы не хотим коммитить сразу.

23.1) Как сохранить стэш?
git команда: git stash
Кнопка в vs code: View -> Command Palette -> Git: Stash

23.2) Как восстановить стэш?
git команда: git stash pop

23.3) Различие между стэшем и коммитом.
Стэш — временное хранение, коммит — постоянное сохранение в истории.

Когда лучше сохранить изменения в стэше:
- Если мы работаем над функцией, но вам нужно переключиться на другую задачу или ветку, и вы не хотите коммитить незавершенные изменения.
- Когда мы хотим протестировать изменения в другой ветке, не оставляя текущие изменения в истории.

Когда лучше коммитить:
- Когда мы завершили определенную задачу или функциональность и хотите сохранить изменения в истории.
- Если изменения являются логически завершенными и могут быть полезны для других разработчиков или для вас в будущем.
- Когда мы хотим зафиксировать состояние проекта перед выполнением других операций, таких как слияние или переключение веток.-

23.4) Как просмотреть список сохраненных стэшей?
git stash list

23.5) Как удалить стэш?
git stash drop [stash@{n}] или git stash clear (удалить все)

24) Где посмотреть что есть конфликт в файлах?
- В GitHub Desktop
- В VSCode (подсветка конфликтов)
- В выводе git status
https://youtu.be/hW_7hodGxVU?si=zBxtpa5vJ2n52nwO&t=1035

24.1) Когда он появляется?
При слиянии веток с разными версиями одного файла.

25) Как решить конфликт в файлах?
Выбрать нужную версию или объединить изменения вручную.

26) Напишите правильное утверждение:
Зелёное — то что пришло с гитхаба, синее — локальные изменения.
https://youtu.be/hW_7hodGxVU?si=X4tCoM1Uo_RbZ8dx&t=1062

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
Да, это правильная практика: сначала спрятать свои изменения в stash, затем сделать pull.
https://youtu.be/hW_7hodGxVU?si=EWRx1huij6JyzWgz&t=996

27.1) Что может произойти когда stash восстановите после принятия pull?
Может возникнуть конфликт, если изменения в pull затронули те же строки, что и в stash.

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
Два:
1. Автоматически в VSCode (встроенный редактор конфликтов)
2. Вручную в VSCode.
 
29) Что делает кнопка complete merge?
Завершает процесс слияния после разрешения всех конфликтов и создает merge-коммит.

30) В какой чат нужно писать если остались вопросы?
В чат 'HELP ME' в Telegram.
https://youtu.be/hW_7hodGxVU?si=cxBFn2H-93BnHbDt&t=1178

31) Что такое FORK? Зачем его делают?
Fork — это копия чужого репозитория в нашем GitHub-аккаунте. Его делают для:
- Внесения изменений в чужой проект
- Использования чужого кода как основы для своего проекта
- Изучения кода других разработчиков.

32) Как скачать копию репозитория (fork) на локальный компьютер?
1. Через GitHub Desktop: Clone repository
2. Через git команду: git clone URL_репозитория
3. Через кнопку 'Code' на GitHub и загрузку ZIP. 

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
C вероятность 90% ошибки уже были решены Русланом Сенаторовым и другими студентами. 
https://youtu.be/hW_7hodGxVU?si=c0BLjCtJ9IB9hgJw&t=833

34) Как создать файл в vs code?
- Нажать на пиктограмму листочка с плюсиком
- Ctrl+N (новый файл)
- Правый клик в Explorer -> New File
- File -> New File
- Через Command Palette (Ctrl+Shift+P): Create New File.

35) Файл лога нужно заполнять в конце каждого урока?
Да, это обязательная практика для отслеживания прогресса и фиксации изученного материала.
https://youtu.be/hW_7hodGxVU?si=QxtzLFqRDBj5EEuw&t=95

Дополнительные вопросы:

1) Какая команда конвертирует файл в py из ipynb?
jupytext --to py notebook.ipynb

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
Пакетный менеджер — это инструмент для установки, обновления и управления библиотеками и зависимостями проекта. Пока пользуюсь pip. Насколько я понял — conda создана специально для DataScience и включает множество (больше тысячи для Anaconda) пакетов для data science.

3) Почему расширение py лучше чем ipynb?
- Файлы .py являются обычными текстовыми файлами, что делает их более удобными для работы с системами контроля версий, такими как Git. Они легче сравниваются и сливаются, чем файлы .ipynb, которые представляют собой JSON-формат.
- При работе в команде конфликты при слиянии кода в .py файлах возникают реже, так как изменения в коде легче отслеживать и объединять.
- Код в .py файлах проще читать и редактировать в любом текстовом редакторе или IDE, без необходимости запускать специальное программное обеспечение, как Jupyter Notebook.
- Файлы .py можно легко импортировать в другие Python-скрипты или модули, что упрощает организацию и повторное использование кода.
- Можно импортировать как модуль.
- Скрипты на Python в формате .py могут выполняться быстрее, так как они не требуют дополнительных ресурсов для рендеринга ячеек и вывода, как это происходит в Jupyter.

4) Что такое pep8?
PEP 8 — это руководство по стилю кода Python, описывающее соглашения по форматированию.

4.1) Линтеры проверяют на соблюдение pep8?
Да, flake8 и pylint проверяют соответствие кода стандартам PEP 8.

4.2) Какая нотация используется для создания переменных?
snake_case: все буквы маленькие, слова разделяются подчеркиванием.

4.3) Может ли переменная состоять из одной буквы например андерскор "_"?
Да, но это не рекомендуется, кроме специальных случаев.

4.4) Зачем и где мы используем андерскор _?
- Для временных или неиспользуемых переменных
- Для разделения слов в именах (snake_case)
- Для обозначения 'приватных' атрибутов
- В интерактивной оболочке для последнего результата.

4.5) По PEP8 допустима переменная в одну букву?
Допустима только в ограниченных контекстах:
- Счетчики в коротких циклах (i, j, k)
- Координаты (x, y, z)
- В математических формулах, соответствующих общепринятым обозначениям.


