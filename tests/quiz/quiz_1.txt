Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(ОПЦИОНАЛЬНО)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
2) Как принять домашку?
3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
3.1) Где брать ссылку на коммит? куда её отправлять? 
4) Что такое файл лога? 
4.1) Когда нужно его пушить?
5) Что такое интерпритатор? 
6) Где можно выбрать интерпритатор?
7) Что такое модуль? 
8) Как создать и отправить коммит?
9) Как посмотреть что коммит точно отправлен и находится в github?
10) Какая команда показывает что код не прошёл проверки на ошибки? 
10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
11) Как узнать какой именно линтер не прошёл проверку?
12) Линтер Pylint видит markdown?
13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
14) Где посмотреть номер ячейки в vscode?
15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
16) Где посмотреть в какой ячейке ошибка?
17) Как запустить терминал?
18) Что такое линтер?
19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
21) С какой  git команды начинается утро программиста?
22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
23) Что такое stash?  
  Общее объяснение концепции.
23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 

  Кнопка в vs code:

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.
23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.

24) Где посмотреть что есть конфликт в файлах? 
24.1) Когда он появляется?
25) Как решить конфликт в файлах?
26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения 
27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 
27.1) Что может произойти когда stash восстановите после принятия pull?
28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
29) Что делает кнопка complete merge?
30) В какой чат нужно писать если остались вопросы?
31) Что такое FORK? Зачем его делают? 
32) Как скачать форкнутый репозиторий на локальный компьютер?
33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
34) Как создать файл в vs code?
35) Файл лога нужно заполнять в конце каждого урока?
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 
2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
3) Почему расширение py лучше чем ipynb?
4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/
4.1) линтеры проверяют на соблюдение pep8?
4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
4.4) Зачем и где мы используем андерскор _ 
4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676


Ответы:
1) В чате homework появилась запись с указанием ника и надписью "прими pull".
2) через кошку: fetch origin/pull origin, через терминал: git pull
3) показывает историю коммитов
3.1) history-> нажимаем на коммит правой кнопкой мыши ->view on github-> копируем ссылку url -> отправляем ссылку в чат homework
4) файл с конспектом пройденного урока
4.1) с домашкой
5) Интерпретатор — это программа, которая выполняет код построчно или команду за командой, без предварительного компилирования в исполнимый файл.
6) через кошку: git config --global user.interpreter "python3", на официальном сайте интерпритатора
7) Модуль может быть частью библиотеки или пакета, который предоставляет набор инструментов для решения какой-либо задачи.
8) терминалgit add, кошка - кнопка commit to main
9) через кошку: git push origin main, через терминал: git push.На сайте GitHub откройте раздел Commits в нужном репозитории и убедитесь, что ваш коммит появился в списке
10) pre-commit run --all-files
10.1) Pylint, Flake8, black, isort, autoflake, pydocstyle, mypy и другие
11)вывод будет содержать номер строки или ячейки и описание проблемы
12) Pylint не проверяет файлы в формате Markdown (.md), так как это линтер для Python, предназначенный для анализа кода на Python.
13) в Jupyter Notebook ячейки markdown не считаются
14) В VS Code номер ячейки можно увидеть в верхней части каждой ячейки Jupyter Notebook. И в правом нижнем углу VS Code.
15) Файл .ipynb (Jupyter Notebook) отправляется в GitHub в том же формате, в котором он существует — в формате JSON. Этот формат является текстовым и структурированным, что позволяет хранить как код, так и результаты выполнения, текстовые пояснения, изображения и другие элементы.
16) в терминале: jupyter nbconvert --to script "имя файла.ipynb"
17) Перейдите в меню View → Terminal (или используйте сочетание клавиш `Ctrl + ``)
18) Линтер — это инструмент, который анализирует исходный код программы с целью выявления ошибок, несоответствий стандартам кодирования, потенциальных багов и других проблем. Линтер помогает улучшить качество кода, соблюдение стилей и предотвращение ошибок на ранних стадиях разработки.
19) Pylint Documentation, Stack Overflow
20) Она закрывается после исправления ошибок в линтере Pylint или Flake8, если они настроены для проверки docstring'ов в коде.
21) Описание модуля — это комментарий или строка документации в начале модуля, который объясняет, что делает этот модуль, его функциональность и, возможно, описание его интерфейсов. Описание должно отражать ключевую информацию о том, что делает модуль, чтобы другие разработчики могли понять его назначение и использование.
22) git pull
23) Откройте командную палитру в VS Code и используйте команду Remote-WS: Open Folder или GitHub: Open Repository
23.1) Stash - это буфер обмена, куда можно закинуть изменения, которые не были закоммичены.
23.2) git stash, git stash save "Описание стэша", git stash -k, git stash -u
23.3) git stash apply
Стэш — это временное хранилище для изменений, а коммит — это официальная фиксация изменений в репозитории. Сохранять в стэше удобнее если:
нужно временно приостановить работу над текущими изменениями и переключиться на другую задачу;
нужно очистить рабочее пространство от изменений, но ты не хочешь терять свою работу
нужно принять pull, чтобы избежать конфликтов
Коммитим если:
изменения завершены и представляют собой оконченную работу;
изменения должны быть доступны для других членов команды, если ты работаешь в группе;
нужно зафиксировать стабильную версию перед тем, как продолжить работу над более сложными изменениями.
23.4) git stash list
23.5) Удалить последний стэш - git stash drop, удалить конкретный стэш по индексу - git stash drop stash@{индекс}, удалить все стэши - git stash clear
23.6) Восстановление работы после переключения веток
Нужно переключиться на другую ветку, но ты не готов коммитить текущие изменения.
Ты сохраняешь изменения в стэш, переключаешься на нужную ветку, а затем возвращаешься и восстанавливаешь свою работу.
git stash # Сохраняешь изменения
git checkout bugfix/urgent-fix # Переключаешься на ветку с срочной задачей

Выполняешь срочную работу
git checkout feature/new-feature # Возвращаешься к своей ветке
git stash pop # Восстанавливаешь изменения
7.2. Подтягивание последних изменений из основной ветки перед работой
Ты работаешь в ветке feature/new-feature, но прежде чем продолжить, нужно обновить её последними изменениями из основной ветки main.
Ты сохраняешь текущие изменения, подтягиваешь последние обновления из main, а затем восстанавливаешь свои изменения и продолжаешь работу.
git stash # Сохраняешь незакоммиченные изменения
git checkout main
git pull origin main # Подтягиваешь последние изменения из основной ветки
git checkout feature/new-feature
git stash pop # Восстанавливаешь свои изменения и продолжаешь работу
24) В терминале: Если возникает конфликт во время выполнения команды git merge или git pull, Git выведет сообщение об ошибке с указанием, что файлы находятся в конфликте.
В GitHub: Если конфликт произошел при слиянии веток, GitHub покажет его на веб-странице репозитория, где будет отображено сообщение о наличии конфликтов в файлах.
24.1) Конфликт возникает, когда Git не может автоматически объединить изменения из разных веток или коммитов. Это происходит, если:
Несколько разработчиков изменяли один и тот же участок кода в одном и том же файле.
Один разработчик изменил код в одном месте, а другой — в другом месте того же файла, но с различными изменениями.
25) сохраните в стэше локальные изменения, примите pull, восстановите стэш, отдайте коммит
26) Зелёное — это изменения, которые пришли с GitHub (из удаленной ветки).
Синее — это ваши локальные изменения (или изменения из вашей текущей ветки).
27) Да, можно принять pull
27.1) Могут возникнуть конфликты, если изменения, которые были в стэше, касаются того же самого кода, который был изменен в удаленной ветке.
28) 4: accept current changes, 3: accept incoming changes, 2: accept both, 1:откорректировать вручную
29) Complete Merge завершает процесс слияния веток в Git, чтобы подтвердить завершение слияния после разрешения всех конфликтов и после того, как изменения были добавлены в индекс.
30) в чат help
31) Fork — это процесс создания копии репозитория на вашем аккаунте. Это полезно, когда вы хотите внести изменения в проект, но не имеете прав на внесение изменений в основной репозиторий (например, в открытых проектах на GitHub).
32) Перейдите на страницу форкнутого репозитория на GitHub.
Нажмите на кнопку Code (или Clone).
Скопируйте URL репозитория (можно выбрать HTTPS или SSH).
В терминале выполните команду:
git clone <URL>
через кошку
33) 90%
34) Перейдите в меню File → New File.
Или используйте горячие клавиши Ctrl + N
file +
35) файл лого нужно заполнять в конце каждого урока

Дополнительные вопросы:
1) jupytext --to py *.ipynb
2) pip — это стандартный пакетный менеджер для Python, который используется для установки библиотек, доступных в Python Package Index (PyPI).
conda — это более универсальный пакетный менеджер, который не только управляет Python-библиотеками, но и позволяет устанавливать и управлять зависимостями, которые не связаны с Python, например, такие как библиотеки C/C++.
3)Легче интегрировать с CI/CD: Скрипты .py проще интегрировать в системы непрерывной интеграции и деплоя, что делает их более удобными для производственной разработки.
Меньше объема: .py файлы обычно компактнее, поскольку они содержат только код, без метаданных и результатов ячеек, как в .ipynb.
Универсальность: .py файлы могут быть использованы в любом IDE, текстовом редакторе или инструменте для разработки.
Легче работать в командной разработке: Скрипты Python проще для совместной работы в командах.
4)PEP 8 (Python Enhancement Proposal 8) — это стиль кодирования для языка Python. Он описывает рекомендации и стандарты, которые помогают делать код читаемым, понятным и поддерживаемым. 
4.1)Да, линтеры (например, Pylint, Flake8, black) могут проверять код на соблюдение PEP8.
4.2) В соответствии с PEP 8 для создания переменных рекомендуется использовать snake_case (строчные буквы с подчеркиванием между словами)
4.3) Игнорируемая переменная обозначается одним подчеркиванием (_).
4.4) Игнорирование значения, магические методы, для обозначения приватных атрибутов.
4.5) Да, по PEP 8 допустимо использовать переменные в одну букву, но это не рекомендуется для переменных, значение которых должно быть понятно. 
