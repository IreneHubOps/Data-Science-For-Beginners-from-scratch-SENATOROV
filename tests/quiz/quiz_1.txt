Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):

(По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
- Появляется уведомление в GitHub о новом pull request
- В репозитории появляется новая ветка с изменениями

2) Как принять домашку?
- Открыть pull request в GitHub
- Проверить изменения в коде
- Нажать кнопку "Merge pull request" если всё в порядке

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
- History показывает историю изменений файла/репозитория
- При правом клике на коммит можно:
  - Скопировать хэш коммита
  - Откатиться к этому коммиту
  - Создать ветку из этого коммита
  - Сравнить с другими коммитами

3.1) Где брать ссылку на коммит? куда её отправлять?
- Ссылку на коммит можно получить кликнув на хэш коммита в истории
- Отправлять ссылку нужно преподавателю для проверки работы

4) Что такое файл лога?
- Файл, в котором записывается информация о выполненной работе и затраченном времени

4.1) Когда нужно его пушить?
- После каждого занятия/выполнения задания
- Перед отправкой домашней работы

5) Что такое интерпретатор?
- Программа, которая построчно выполняет код на Python

6) Где можно выбрать интерпретатор?
- В VSCode внизу слева в статусной строке
- Через Command Palette (Ctrl+Shift+P) -> Python: Select Interpreter

7) Что такое модуль?
- Файл с Python кодом, который можно импортировать в другие программы

8) Как создать и отправить коммит?
- git add . (добавить изменения)
- git commit -m "сообщение" (создать коммит)
- git push (отправить на GitHub)

9) Как посмотреть что коммит точно отправлен и находится в github?
- Проверить историю коммитов на GitHub
- Посмотреть в локальной истории git log
- Сравнить хэши коммитов

10) Какая команда показывает что код не прошёл проверки на ошибки?
- pylint выдаёт ошибки при проверке кода

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику:
- pylint - проверяет стиль кода и ошибки
- flake8 - проверяет на соответствие PEP8
- mypy - проверяет типы
- black - форматирует код
- isort - сортирует импорты

11) Как узнать какой именно линтер не прошёл проверку?
- В выводе ошибок будет указано название линтера
- В VSCode показывается в Problems

12) Линтер Pylint видит markdown?
- Нет, pylint проверяет только Python код

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
- Да, может отличаться если:
  - Ячейки выполнялись в разном порядке
  - Были удалены/добавлены ячейки
  - Был перезапуск ядра

14) Где посмотреть номер ячейки в vscode?
- Слева от ячейки в Jupyter notebook

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
- .ipynb файлы хранятся в формате JSON
- JSON используется для хранения структуры notebook'а, кода, вывода и метаданных

16) Где посмотреть в какой ячейке ошибка?
- В выводе ошибки указывается номер ячейки
- В Problems панели VSCode

17) Как запустить терминал?
- Ctrl+` 
- View -> Terminal
- Terminal -> New Terminal

18) Что такое линтер?
- Инструмент для проверки кода на соответствие стандартам и поиска потенциальных ошибок

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
- stackoverflow.com

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
- После исправления ошибок pylint

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
- Документация в начале файла, описывающая назначение и содержимое модуля
- Да, должно отражать основную информацию о модуле

21) С какой git команды начинается утро программиста?
- git pull - получение последних изменений с удалённого репозитория

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
- Через контекстное меню правой кнопкой мыши
- Открыть VSCode вручную и открыть папку проекта

23) Что такое stash?
- Временное хранилище изменений, которые не готовы для коммита

23.1) Как сохранить стэш?
git команда: git stash save "описание"
Кнопка в vs code: View -> Command Palette -> Git: Stash

23.2) Как восстановить стэш?
git команда: git stash pop

23.3) Различие между стэшем и коммитом
- Стэш временный, коммит постоянный
- Стэш для незавершённых изменений
- Коммит для законченных изменений

23.4) Как просмотреть список сохраненных стэшей?
git команда: git stash list

23.5) Как удалить стэш?
git команда: 
- git stash drop stash@{n} - удалить конкретный стэш
- git stash clear - удалить все стэши

23.6) Практические примеры использования стэша
- Временное сохранение изменений перед pull
- Переключение между задачами
- Сохранение экспериментального кода

24) Где посмотреть что есть конфликт в файлах?
- В VSCode файлы с конфликтами помечаются специальным значком
- Git status показывает конфликтующие файлы

24.1) Когда он появляется?
- При слиянии веток с конфликтующими изменениями
- При pull с конфликтующими изменениями

25) Как решить конфликт в файлах?
- Выбрать нужные изменения в редакторе
- Сохранить файл
- Добавить в git и закоммитить

26) Напишите правильное утверждение
- Зелёное то что пришло с гитхаба и синее локальные изменения

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
- Да, можно

27.1) Что может произойти когда stash восстановите после принятия pull?
- Могут возникнуть конфликты если были изменены те же участки кода

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
2 способа:
- Через редактор VSCode
- Через командную строку git

29) Что делает кнопка complete merge?
- Завершает процесс слияния после разрешения конфликтов

30) В какой чат нужно писать если остались вопросы?
- В чат поддержки курса/преподавателя

31) Что такое FORK? Зачем его делают?
- Копия репозитория в ваш аккаунт GitHub
- Позволяет свободно экспериментировать с кодом
- Необходим для внесения изменений в чужие проекты

32) Как скачать форкнутый репозиторий на локальный компьютер?
- git clone <url форкнутого репозитория>

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
- Высокая вероятность
- Решены другими студентами/разработчиками

34) Как создать файл в vs code?
- Через меню File -> New File
- Через контекстное меню в файловом дереве
- Через сочетание клавиш Ctrl+N

35) Файл лога нужно заполнять в конце каждого урока?
- Да, для отслеживания прогресса и затраченного времени

==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb?
- jupyter nbconvert --to script filename.ipynb

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
- Инструмент для установки и управления пакетами Python
- Conda лучше для data science из-за лучшей поддержки научных библиотек

3) Почему расширение py лучше чем ipynb?
- Лучше работает с системами контроля версий
- Проще редактировать
- Быстрее выполняется
- Меньше проблем с форматированием

4) Что такое pep8?
- Руководство по стилю кода Python

4.1) линтеры проверяют на соблюдение pep8?
- Да, многие линтеры проверяют соответствие PEP8

4.2) Какая нотация используется для создания переменных?
- snake_case для переменных и функций
- PascalCase для классов

4.3) Может ли переменная состоять из одной буквы например андерскор "_"?
- Да, но не рекомендуется кроме специальных случаев

4.4) Зачем и где мы используем андерскор _?
- Для внутренних переменных
- Для игнорирования значений
- В качестве разделителя в длинных числах

4.5) По PEP8 допустима переменная в одну букву?
- Допустима, но не рекомендуется кроме специальных случаев (i в циклах)