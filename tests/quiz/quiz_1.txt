Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(ОПЦИОНАЛЬНО)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла? 0:08 в чате homework если я увижу свой ник и "прими пул," это будет значить что домашка пришла

2) Как принять домашку? заходим в кошечку, нажимаем pull origin далее fetch origin, далее просматриваем коммиты в истории, основной коммит это homework где можно найти домашку, но остальные коммиты так же нужно просматривать.

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит? в ней ты просматриваешь все коммиты, какие функции при нажатии правой кнопки мыши не знаю, у меня нет кошечки, в видео не сказано.

3.1) Где брать ссылку на коммит? куда её отправлять? на сайте github просто скопировать ссылку на нужный коммит и отправить в чат homework с коментарием "коммит отдал(а)"

4) Что такое файл лога? Мы создаем файл лого в расширение .ipynb и в текстовой ячейке (markdown) мы лаконично конспектируем всё то, что было на занятие. 

4.1) Когда нужно его пушить? после каждого занятия.

5) Что такое интерпритатор? 3:20 это то что выполняет код (преобразовывая его в машинный код) в тот же момент, без предварительной компиляции, то есть без предварительно созданного отдельного файла (как это делает компилятор). 

6) Где можно выбрать интерпритатор? 3:25 сверху в строке либо справа с помощью кнопки base

7) Что такое модуль? файл .py или .ipynb

8) Как создать и отправить коммит? 

я опишу как я это знаю по курсору: 

изменения попадают в зону Changes (неотслеживаемые изменения), нажав на третью иконку (мне похоже на графы) можно изменения из этой зоны с помощью + перенести в зону Staged Changes (подготовленне изменения). В этой зоне создаются коммиты, нужно ввести описание коммита в поле commit message и нажать на кнопку commit. Коммит появится в  Local Commits. После чего нужно будет нажать на кнопку Push и отправить коммит в гит. 

9) Как посмотреть что коммит точно отправлен и находится в github? в истории

10) Какая команда показывает что код не прошёл проверки на ошибки? 6:35 нужно в терминал вставить команду "pre-commit run --all-files"  

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
Pylint
pydocstyle
Flake8
Mypy

11) Как узнать какой именно линтер не прошёл проверку? запустить команду pre-commit run --all-files и в терминале отобразится линтер который не прошел проверку, напротив просто будет стоять - Failed 

12) Линтер Pylint видит markdown? линтер в целом игнорирует ячейки markdown

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае? да, могут. в том случае если есть ячейки markdown, тогда в vs code будут отображено все количество ячеек, а в терминали за исключением ячеек markdown.

14) Где посмотреть номер ячейки в vscode? 7:34 внизу справа (cell)

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON? в формате JSON (JavaScript Object Notation) - это текстовыйц формат, позволяет хранить данные в структурированном виде и удобный к чтению.

16) Где посмотреть в какой ячейке ошибка? в терминале.

17) Как запустить терминал? нажать на кнопку terminal сверху в приборной панеле и в выпадающем меню выбрать new terminal.

18) Что такое линтер? 6:45 это программа которая проверяет насколько все корректно написано в файле, согласно всем стандартам.

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint? https://pylint.pycqa.org

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере? в pylint.

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле? Описание того, что в модуле.

21) С какой  git команды начинается утро программиста?

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки? нажать правой кнопкой мыши на кнопку справа "current repository" и в выпадающем меню выбрать "open in VS code".

23) Что такое stash?  
  Общее объяснение концепции. Это временное хранилище куда можно сохранить локальные изменения, не создавая коммита.

23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): git stash save "NAME_STASH".

  Кнопка в vs code: в разделе "source control" нажимаете "more action...(иконка ...)", далее выбираете stash далее stash staged, вводите имя и нажимаете ентер.

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?: заходим в stashed changes (слева снизу), и нажимаем кнопку restore (это обязательно нужно сделать чтобы сохранения из врменного хранилища сохранились)

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: 
      git stash pop - восстановить последний стэш и удалить его из списка
      git stash apply - восстановления без удаления
      git stash apply stash@{N} - восстановления по конкретном номеру


23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.

  стэш это временное хранилище, в которое стоит сохранять локальные изменения, для возможности принятия пулла. Имеет смысл если одновременно работать в одном и том же файле локально и в интернете. 
  
  коммит это сохранения изменений в конкретный момент времени, что позволяет вернутся к конкретному состоянию проекта. 

23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash list

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

  git stash drop stash@{N} - удалить конкретный стэш по номеру
  git stash clear - удалить все  стэши сразу
  git stash pop - применить стэш и сразу удалить

23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.

Если работать одновременно в одном файле локально и в интернете, стэш поможет принять пулл: сохраняя локальные изменения во временное хранилище (после принятия пулла обязательно нужно восстановить сохранения со временного хранилища)

24) Где посмотреть что есть конфликт в файлах? слева в кошечке появятся (треугольник с !)

24.1) Когда он появляется? после принятия пулла, при восстановление локальных изменений с временного хранилища, гит не понимает это сохранены локальные изменения или те что были в интернете

25) Как решить конфликт в файлах? открываем конфликт файл в vs code, нажимаем кнопку "Accept Current Changes", далее кнопку ниже "Resolve in Merge Editor" и далее кнопку "complete merge"

26) Напишиие правильное утверждение
Зелёное то что пришло с гитхаба и синее локальные изменения

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? да, именно так можно принять пулл 

27.1) Что может произойти когда stash восстановите после принятия pull? возникает конфликт, гит не понимает какие изменения сохранились (с гитхаба или локальные)

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы. 
4 способа
1. Accept Current Changes
2. Accept Incoming Changes (нежелательно так как не сохраняются локальные изменения)
3. Accept Both Changes4
4. Вручную удалить лишнее и нажимаем на кнопку ниже "Resolve in Merge Editor".

29) Что делает кнопка complete merge? позволяет завершить процесс принятия локальных изменения и изменений с гитхаба в одном файле.

30) В какой чат нужно писать если остались вопросы? чат HELP ME

31) Что такое FORK? Зачем его делают? это копия чужого репозитория, создать форк - это сделать копию репозитория и сделать его личным. для того чтобы изменять и работать с чужим кодом независимо от оригинального репозитория. 

32) Как скачать форкнутый репозиторий на локальный компьютер? с помощью команды git clone, либо через кошку, но я с ней не работаю

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил? с большой вероятностью, остальные студенты. 

34) Как создать файл в vs code? сверху нажимаем на иконку "лист с +"

35) Файл лога нужно заполнять в конце каждого урока? да
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс? 

лучше conda

3) Почему расширение py лучше чем ipynb? смотря для чего, если для кода и разработки, то он более универсален, запускается в любом окружении пайтон и поддерживается всеми интерпретаторами. в гите легче сравнивать код с разнных коммитов. если для визуализации данных то лучше ipynb

4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/

Руководство по стилю для кода на пайтон

4.1) линтеры проверяют на соблюдение pep8? из тех что были упомянуты выше только Pylint и Flake8

4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

Идентификаторы не могут содержать пробелы, также в них учитывается регистр символов. для идентификаторов из нескольких слов используется три схемы: змеиный регистр (между словами _ и все буквы в нижнем регистре, либо вверхнем если это константа), 

верблюжий регистр(первое слово в нижнем регистре, все последующие слова начинаются с заглавной)

схема паскаль (все слова начинаются с заглавной буквы, такое название потому что обычно используется в языке паскаль)

в одном проекте используется одна схема. 

не пропускайте буквы в именах. используйте содержательные имена, для того чтобы вернувшись к коду через длительное время можно было спокойно восстановить смысловую нагрузку.

венгерская запись уже устарела, но использование префиксов в переменных (функциях, меторадах) содержащих логические значения, а также для уточнения еденицы измерения, имеет место.

Стоит выбирать имена пригодные для поиска, для этого имена должны быть содержательными и понятными.

Также важно чтобы идентификаторы были написаны прямо, традиционным простым языком и без каламбуров и шуток, чтобы не пришлось растолковывать и пояснять что это могло бы значить.

Не заменяете встроенные имена. Не используйте такие встроенные имена, как:  all, any, date, email, file, format, hash, id, input, list, min, max, object, open, random, set, str, sum, test и type. Это всегда приведет к ошибке.
Также не стоит именовать файлы .py именами сторонних модулей.

Никогда не используйте такие имена: temp, var, data. это буквально общие название и никогда не дадут вам конкретного понимания переменной. 


4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ? 

в целом нет, как исключение 

i, j, k - для циклов for 
x, y - для обозначения декартовых координат


4.4) Зачем и где мы используем андерскор _ 
для разделения слов вместо пробела, так как в идендификаторах пайтон не используется пробел. (змеиный регистр)

если мы говорим про соглашения о именах PEP8, то приватные атрибуты классов всегда начинаются с "_", а публичные никогда. 

4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

нет

