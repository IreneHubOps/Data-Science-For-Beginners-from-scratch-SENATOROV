Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?
В чате HomeWork придет сообщение @username прими пул (0:11)

2) Как принять домашку?
Заходим в GitHub Desktop, нажимем Fetch origin. Домашка в файле hw.txt (0:20)

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
В history отображаются коммиты.
При нажатии правой кнопкой, в частности, появляется функция "View on GitHub" (14:25)

3.1) Где брать ссылку на коммит? куда её отправлять? 
После перехода на Гитхаб из адресной строки браузера. Отправлять в чат ТГ. В видео говорится, что нужно отправлять в чат HomeWork. Однако, насколько я понимаю, сейчас нужно писать в чат Flood.(14:42)

4) Что такое файл лога? 
Это файл, в котором мы пишем, что делали на уроке.

4.1) Когда нужно его пушить?
Всегда, когда делаем домашку.

5) Что такое интерпритатор? 
Интерпретатор — это программа, которая выполняет код (если правильно помню, то в отличие от компилятора, код выполняется построчно). В нашем случае мы выбираем Python обязательно из каталога Anaconda.(3:14)

6) Где можно выбрать интерпритатор?
Интерпретатор можно выбрать в настройках Курсора/VSCode, а также не заходя в настройки в верхней части экрана (выпадающий список появится при первом запуске, если интерпретатор не выбран) или справа над рабочим полем файла.(3:09)

7) Что такое модуль? 
Это обычный файл .py или .ipynb(9:45)

8) Как создать и отправить коммит?
Заходим на GitHub Desktop, в нем будут отображены изменения, которые мы внесли в файлы. В окошке Summary пишем название коммита и нажимаем на кнопку commit to main и push origin(3:42)

9) Как посмотреть что коммит точно отправлен и находится в github?
- На GitHub в репозитории
- git log --oneline - посмотреть историю коммитов
- git status - убедиться, что нет неотправленных изменений
(4:18)

10) Какая команда показывает что код не прошёл проверки на ошибки? 
pre-commit run --all-files

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
- pylint: проверяет стиль и находит программные ошибки
- pydocstyle: проверяет документацию
- flake8: проверяет на соответствие PEP 8
- black: форматирует код
- isort: сортирует импорты

11) Как узнать какой именно линтер не прошёл проверку?
В выводе pre-commit явно указывается какой линтер Failed. Например: "pylint...Failed"(7:05)

12) Линтер Pylint видит markdown?
Нет

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
Если есть ячейки в формате markdown — их линтер не видит(7:45)


14) Где посмотреть номер ячейки в vscode?
В нижнем правом углу Status bar.

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
Файлы с расширением .ipynb хранятся в формате json, поэтому на гитхабе они будут записаны именно в формате json.

16) Где посмотреть в какой ячейке ошибка?
В логах терминала

17) Как запустить терминал?
View->Terminal

18) Что такое линтер?
Линтер — инструмент статического анализа кода, который проверяет стиль и находит потенциальные ошибки без выполнения кода.

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
- pylint.pycqa.org

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
После исправления pylint.

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
Это docstring в начале файла, который объясняет назначение и содержимое модуля.

21) С какой  git команды начинается утро программиста?
git pull

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
Нажать правой кнопкой мышки на "Current repository" и выбрать "Open in Visual Studio Code"(15:20)

23) Что такое stash?  
  Stash — это временное хранилище изменений, которые мы не хотим коммитить сразу.


23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531):  git stash

  Кнопка в vs code: View->Command Palette->Git: Stash

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: git stash pop

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.
  Stash — временное хранение, Commit — постоянное сохранение в истории.
  Commit создает точку сохранения локальных изменений в проекте и является неотъемлемой частью истории репозитория. Коммиты видны всем, кто с ним работает. Stash создан для сохранения локальных изменений в специализированный буфер когда возникают конфликты при одновременной работе в файле локально и на компьютере, или когда нужно сохранить незавершенные изменения и временно переключиться на другую ветку. Изменения внесенные в Stash не могут видеть все, кто работает с репозиторием.


23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash  list

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash drop [stash@{n}] или git stash clear (удалить все)

23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.
  Когда возникают конфликты при попытке отправить коммит в ветку, а кто-то уже в интернете внес изменения в тот же файл.
  Когда мы хотим временно переключиться на новую ветку, но еще не до конца завершили работу в старой ветке.
  

24) Где посмотреть что есть конфликт в файлах? 
Можно посмотреть в IDE, в которой работаем (в нашем случае VS Code), или в GitHub Desktop. Конфликтные строки будут подсвечены зеленым и синим цветом,в  зависимости от того, откуда они пришли - с локального репозитория или с интернета.

24.1) Когда он появляется?
При слияние веток с разными версиями файла.

25) Как решить конфликт в файлах?
Выбрать нужную версию или объединить изменения вручную.

26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения 
 Зеленое - с гитхаба, синее - локальные(17:42)

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 
Да

27.1) Что может произойти когда stash восстановите после принятия pull?
Может возникнуть конфликт, если изменения в pull затронули те же строки, что и в stash.

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
Два:
1. Автоматически в VSCode (встроенный редактор конфликтов)
2. Вручную в VSCode.


29) Что делает кнопка complete merge?
После разрешение всех конфликтов, завершает процесс слияние и создает matge-commit.

30) В какой чат нужно писать если остались вопросы?
HELP ME

31) Что такое FORK? Зачем его делают? 
Fork — это копия чужого репозитория в нашем GitHub-аккаунте. Его делают для:
- Изучения кода других разработчиков.
- Внесения изменений в чужой проект
- Использования чужого кода для своего проекта

32) Как скачать форкнутый репозиторий на локальный компьютер?
Через GitHub Desktop: Clone repository
Через git команду: git clone URL_repository

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
C вероятностью 99% ошибки уже были решены в чате HELP ME.

34) Как создать файл в vs code?
Рядом с названием директории, в которой мы работаем, есть кнопки New File

35) Файл лога нужно заполнять в конце каждого урока?
Да.
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 
2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
3) Почему расширение py лучше чем ipynb?
4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/
4.1) линтеры проверяют на соблюдение pep8?
4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
4.4) Зачем и где мы используем андерскор _ 
4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676


