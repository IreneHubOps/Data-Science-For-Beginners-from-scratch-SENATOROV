Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
    
(По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1) Как понять, что домашка пришла?

0:11 - в чате HomeWork придет сообщение @ник прими пул.

2) Как принять домашку?

0:20 - заходим в кошечку, нажимаем Fetch origin
Домашка будет в файле hw.txt

3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?

0:29 - в history мы видим историю коммитов, из них верхний - самый свежий коммит.
4:16 - при нажатии правой кнопкой мыши на коммит появляются несколько функций:
1. Amend commit
2. Reset to commit 
3. Checkout commit
4. Recorder commit
5. Revert changes in commit
6. Create branch from commit
7. Create Tag...
8. Cherry-pick commit...
9. Copy SHA
10. Copy Tag
11. View on GitHub - при выборе этой опции переходим на страницу коммита на GitHub

3.1) Где брать ссылку на коммит? куда её отправлять? 

После перехода по View on GitHub мы переходим на страницу коммита, берем ссылку и отправляем в чат телеграм HomeWork. Рядом со ссылкой пишем сообщение "коммит отдал".

4) Что такое файл лога? 

1:37 - это файл, который мы создаем в конце каждого урока. В нем пишем дату и тезисно или подробно расписываем все, что выучили за урок

4.1) Когда нужно его пушить?

4:05 - После того как закоммитили изменения в ветку и сделали описание коммита


5) Что такое интерпретатор? 

3:15 - это программа, которая читает и запускает код

6) Где можно выбрать интерпретатор?

3:12 - при нажатии на крутилку (Run) сверху появится окно (Select Kernel), далее Another Kernel -> Python environments -> выбираем anaconda.
3:27 - либо можно выбрать слева над верхней ячейкой, там будет написано Select Kernel

7) Что такое модуль? 

9:45 - Это обычный файл с расширением .py или .ipynb

8) Как создать и отправить коммит?

3:42 - заходим в кошку, в ней будут отображены изменения, которые мы внесли в файлы. Далее мы в окошке Summary (required) пишем название коммита и нажимаем на кнопку Commit to main

9) Как посмотреть что коммит точно отправлен и находится в github?

В терминале можно убедиться с помощью команды git status.
Можно посмотреть в кошке, нажать на коммит правой кнопкой мыши и перейти по кнопке View on GitHub на страницу коммита и посмотреть там, что все изменения были добавлены

10) Какая команда показывает что код не прошёл проверки на ошибки?

pre-commit run --all-files

10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.

1. jupitext: 
  - Конвертирует между форматами .ipynb и .py, другими словами превращает jupyter notebooks в обычные Python файлы и обратно
  - Обеспечивает совместимость jupyter notebooks с системами контроля версий
  - Поддерживает синхронизацию между notebook и текстовым файлом

2. docformatter:
  - Форматирует docstrings согласно PEP 257
  - Расставляет правильные отступы и переносы строк
  - Обеспечивает единый стиль документации

3. pydocstyle:
  - Проверяет соответствие стандартам PEP 257
  - Проверяет наличие и формат docstrings
  - Подсказывает, если документация оформлена неправильно

4. mypy:
   - Проверяет соответствие типов переменных в коде. Например, не пытаемся ли мы сложить строку с числом

5. pylint:
  - Ищет ошибки, плохой стиль и потенциальные проблемы
  - Предлагает рефакторинг кода

6. flake8:
   - Проверяет на соответствие стандарту PEP8
   - Находит синтаксические ошибки
   - Включает в себя несколько проверок:
      * pyflakes (находит логические ошибки)
      * pycodestyle (проверяет стиль кода)
      * mccabe (проверяет сложность кода)

7. black:
  - Автоматический форматтер кода
  - Обеспечивает единый стиль форматирования
  - Не требует настройки, имеет единственный стиль форматирования


11) Как узнать какой именно линтер не прошёл проверку?

5:34 - появляется окно с ошибками линтеров. Необходимо прокрутить вниз до описания ошибок. Слева будет указано имя секции (линтера), а справа ошибка секции (например Failed)

12) Линтер Pylint видит markdown?

нет

13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?

Может отличаться в случае если у нас вперемешку есть ячейки python и markdown. В терминале нумерация ячеек будет отображена правильно, как есть. А так как линтер не видит markdown, то эти ячейки не будут учитываться при нумерации, так как линтер их не видит.

14) Где посмотреть номер ячейки в vscode?

В нижнем правом углу Status Bar (нижняя панель с информацией). Будет написано, например, Cell 1 of 2.

15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?

Файлы с расширением .ipynb хранятся в формате json, поэтому на гитхабе они будут записаны именно в формате json.

16) Где посмотреть в какой ячейке ошибка?

При попытке закоммитить код с ошибками, выйдет окно с ошибками линтеров, в котором если прокрутить вниз, будет указано название файла и номер ячейки в этом файле, где есть ошибка.

17) Как запустить терминал?

В верхней части VS Code есть т.н. Menu Bar, нажимаем там на Terminal -> New Terminal.

18) Что такое линтер?

6:54 - это программа, которая проверяет файлы на корректность. 

19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?

https://pylint.pycqa.org

20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?

11:15 - в большинстве случаев автоматически закрывается после исправления ошибок по pylint

21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?

Описание модуля находится в самом его начале и содержит информацию о содержании модуля. Заключается в такие кавычки - """...какое-то описание..."""

21) С какой  git команды начинается утро программиста?

Не помню чтобы слышала ответ на этот вопрос в видео. Предположу, что утро программиста должно начинаться с команды git pull, а еще лучше с фразы Hello world.

22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?

15:24 - с правой стороны под Menu Bar есть кнопка Current Repository, нажимаем на нее правой кнопкой мышки -> Open in Visual Studio Code

23) Что такое stash?  
  Общее объяснение концепции.

16:28 - Когда мы после Fetch origin видим сообщение "Stash changes", это говорит о том, что работа происходит в одном файле - в интернете и на локальном компьютере. Стэш - это буфер, куда мы временно сохраняем локальные изменения, чтобы принять pull.

То есть в стэш мы можем сохранить еще незавершенные изменения и при необходимости их применить в любой момент, в то время как коммит мы делаем когда хотим сохранить в истории репозитория уже завершенные изменения, которые проверили на функциональность и работоспособность.

23.1) Как сохранить стэш?
  git командa(подсказка: https://t.me/c/1937296927/3602/19531): 

  git stash save "NAME_STASH" - сохраняет текущие изменения в вашем рабочем каталоге (включая индексированные и неиндексированные изменения) в стэш (временное хранилище) с именем "NAME_STASH".

  Кнопка в vs code:

  Stash changes and continue

23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:

      git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:

      git stash apply stash@{n} - применяет изменения из указанного стэша по его номеру (n). Номер стэша можно узнать с помощью команды git stash list, которая выводит список всех сохраненных стэшей.

23.3) Различие между стэшем и коммитом.  
  Когда лучше сохранить изменения в стэше, а когда коммитить.

Они предназначены для разных целей: Commit создает точку сохранения локальных изменений в проекте и является неотъемлемой частью истории репозитория. Коммиты видны всем, кто с ним работает. Stash создан для сохранения локальных изменений в специализированный буфер когда возникают конфликты при одновременной работе в файле локально и на компьютере, или когда нужно сохранить незавершенные изменения и временно переключиться на другую ветку. Изменения внесенные в Stash не могут видеть все, кто работает с репозиторием.

23.4) Как просмотреть список сохраненных стэшей?  
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

  git stash list

23.5) Как удалить стэш?  
  Команды для удаления отдельных стэшей или всех сразу.
  git команда (подсказка: https://t.me/c/1937296927/3602/19531):

  git stash clear - для удаления всех стэшей
  git stash drop stash@{n} - удаление конкретного стэша по его номеру (n)


23.6) Практические примеры использования стэша.  
  Краткие сценарии, где стэш помогает.

  1. Когда возникают конфликты при попытке отправить коммит в ветку, а кто-то уже в интернете внес изменения в тот же файл.
  2. Когда мы хотим временно переключиться на новую ветку, но еще не до конца завершили работу в старой ветке.
  3. Когда мы хотим проверить/протестировать какой-то код, то чтобы не загрязнять историю коммитами, сохраняем изменения в стэш и при необходимости достаем их из стэша.
  Для восстановления изменений из стэша используется команда git stash pop

24) Где посмотреть что есть конфликт в файлах? 

Можно посмотреть в IDE, в которой работаем (в нашем случае VS Code), или в GitHub Desktop. Конфликтные строки будут подсвечены зеленым и синим цветом,в  зависимости от того, откуда они пришли - с локального репозитория или с интернета.

24.1) Когда он появляется?

Он возникает при слиянии веток, когда работа ведется одновременно в одном файле на одной ветке.

25) Как решить конфликт в файлах?

Устраняем конфликты в VS Code. Зеленым будут подсвечены изменения, которые пришли из интернета, а синим - наши локальные. Чтобы принять изменения из интернета нажимаем Accept current Change, если хотим оставить локальные изменения и удалить те, которые пришли из интернета - Accept Incoming Changes, если хотим оставить оба изменения -  Accept Both Changes. Чаще будем использовать первый вариант - Accept Current Changes.

26) Напишиие правильное утверждение
-Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения 

Зеленое то, что пришло с гитхаба и синее это локальные изменения

27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения? 

Да

27.1) Что может произойти когда stash восстановите после принятия pull?

Мы увидим сам конфликт - отличающиеся строки, которые были затронуты во время pull и изменены локально.

28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.

2 способа, оба в VS Code:
1. Кнопками Accept
2. Вручную удаляем ненужные строки

29) Что делает кнопка complete merge?

Завершает слияние веток после устранения всех конфликтов

30) В какой чат нужно писать если остались вопросы?

HELP ME

31) Что такое FORK? Зачем его делают? 

20:27 - копирование чужого репозитория, чтобы сделать его личным. Это делают для того, чтобы, например, взять этот код за основу для своего проекта, или внести изменения по улучшению в проект. На гитхабе над самим проектом находится кнопка Fork, нажимаем на нее, завершаем копирование репозитория кнопкой Create Fork. Далее репозиторий нужно склонировать 

32) Как скачать форкнутый репозиторий на локальный компьютер?

После Create Fork заходим в кошечку -> Current Repository -> Add -> Clone Repository и выбираем из списка репозиторий, который хотим склонировать (который только что форкнули) -> Clone. После этого проект можно открывать в VS Code и работать с ним дальше.

33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?

С вероятностью 90% наши ошибки уже были решены в чате HELP ME 

34) Как создать файл в vs code?

Рядом с названием директории, в которой мы работаем, есть кнопки New File, New Folder, Refresh Explorer и Collapse Folders in Explorer. Нажимаем на кнопку New File и создается новый файл.
PS: Важно правильно выбрать директорию, где мы хотим создать новый файл. Если хотим создать в корне, то не нужно тыкать ни на какие папки в этой директории. Иначе файл создастся в выделенной папке. Конечно, при необходимости его можно будет перенести.

35) Файл лога нужно заполнять в конце каждого урока?

Да, в течение 10 минут после завершения урока.
==================

Дополнительные вопросы:
1)Какая команда конвертирует файл в py из ipynb? 
подсказка https://t.me/c/1937296927/1/26527 

jupyter nbconvert --to script your_notebook.ipynb
где your_notebook.ipynb это имя нашего файла, который мы хотим сконвертировать

2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?

Это инструмент, который помогает управлять зависимостями и библиотеками. Он позволяет устанавливать, обновлять и удалять пакеты (библиотеки), а также отслеживать их версии и зависимости.
Я использую conda, так как она лучше для data science из-за ее широкой поддержки научных библиотек и мощных возможностей управления окружениями + может управлять не только зависимостями python, нои зависимостями на уровне системы (например библиотеками C/C++).

3) Почему расширение py лучше чем ipynb?

1. Файлы с расширением .py могут быть выполнены напрямую через интерпретатор Python без дополнительных инструментов.
2. Файлы с расширением .py легко интегрируются с различными инструментами разработки и сборки, что упрощает автоматизацию задач и создание CI/CD пайплайнов.
3. Файлы .py проще отслеживать с помощью систем контроля версий (например, Git), так как они не содержат встроенных данных, как это происходит в случае с .ipynb.
4. Файлы .py представляют собой обычные текстовые файлы с кодом, которые можно легко читать и редактировать в любом текстовом редакторе.


4) Что такое pep8? 
подсказка:https://peps.python.org/pep-0008/

Стандарт по написанию кода на python. PEP 8 включает рекомендации по стилю, такие как отступы, длина строки, комментарии, именование переменных и функций, и многое другое.

4.1) линтеры проверяют на соблюдение pep8?

Конечно. Например,линтеры pylint, flake8, black, pycodestyle

4.2) Какая нотация используется для создания переменных? 
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

snake_case

4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?

Переменная может состоять из одной буквы в редких случаях, например в цикле for. Так же в цикле for переменная может быть "_", например for _ in range(len). В других случаях переменная согласно стандарту PEP8 не может быть названа одной буквой или "_".

4.4) Зачем и где мы используем андерскор _ 

1. для обозначения приватных атрибутов класса ставится в начале названия
2. при записи имен переменных или функций в snake_case между словами
3. for _ in range(len)
4. для временных или неиспользуемых переменных

4.5) По PEP8 допустима переменная в одну букву?
ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

Нет. Но имена из одной буквы допустимы в цикле for (например, i, j или k) или использование переменных x и y для декартовый координат. В остальных случаях название переменной должно отражать ее суть.


