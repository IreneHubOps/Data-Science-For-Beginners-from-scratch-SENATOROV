Список вопросов к видео https://t.me/c/1937296927/765/29781 (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):

(ОПЦИОНАЛЬНО)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.

1. Как включить автосохранение данных в VSCODE?

Через интерфейс:
   - File -> Auto Save
   - или нажать на кнопку '...' в верхнем меню -> Auto Save

2. Как настроить перенос строки? 

Alt + Z

3. Сколько символов по pep8 разрешено на строке?

79 символов

4. Какие способы переноса строк показаны в видео:

перенос комментариев с помощью #
4.4. перенос кода с помощью ()
4.6 перенос длинной переменной разбиванием на части и последующей конкатенацией +

4.1 Строки с использованием обратного слэша (\)

string_continued = "This is a long string that we want to " \
                   "split across multiple lines."
print(string_continued)

4.2 Тройные кавычки (''' или """) 

multi_line_string = """This is a string that spans
multiple lines. You can write freely
and it will keep the line breaks."""
print(multi_line_string)

4.3 Создание списка строк и объединение с помощью join

strings = [
    "This is the first line.",
    "This is the second line.",
    "This is the third line."
]
result = "\n".join(strings)  # Используем перенос строк '\n'
print(result)

4.4 Использование круглых скобок для продолжения строки
long_string = (
    "This is a very long string that I would like to "
    "continue on the next line."
)
print(long_string)

4.5 Форматированные строки (f-строки) с использованием скобок
letter_a = 5
letter_b = 6
product_ab = letter_a * letter_b

message = (
    f"when {letter_a} is multiplied by {letter_b}, "
    f"the result is {product_ab}"
)
print(message)

4.6 Сложение строк с помощью +

string_part1 = "This is the first part, "
string_part2 = "and this is the second part."
full_string = string_part1 + string_part2
print(full_string)

5. Проверка на ошибки c помощью кнопки problems, где она находится?

 В нижней панели Terminal:
   - Значок с восклицательным знаком (!) 
   - Показывает количество ошибок/предупреждений
   - Расположен в статус-баре внизу окна

6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?

1. Доступ к Git:
   Третья иконка в левой панели (Source Control)
2. Как сделать коммит в Source Control:
 - Введите сообщение коммита в поле "Message"
 - Нажмите "✓" (Commit) над полем сообщения
 - Или Ctrl + Enter для подтверждения коммита
3. Как отправить (push) изменения:
 - Кнопка "..." в панели Source Control
 - Выберите "Push"
 - Или через статус бар внизу (кнопки sync/push)
4. Как принять домашку:

7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?

"""
GIT - это распределённая система контроля версий:

1. Типы хранилищ Git:
   - Локальный репозиторий (на вашем компьютере)
   - Удаленный репозиторий (GitHub, GitLab, Bitbucket)

2. Основные команды для работы с историей:
"""
# Посмотреть историю коммитов
git log
git log --oneline  # сокращенный вид
git log --graph    # с визуализацией веток

# Посмотреть изменения в файле
git blame filename.py  # кто и когда менял каждую строку
git diff commit1 commit2  # разница между коммитами

# Вернуться к предыдущему коммиту
git checkout commit_hash  # просмотр состояния
git reset --hard commit_hash  # полный возврат (опасно!)
git revert commit_hash  # создание нового коммита, отменяющего изменения

"""
3. Структура Git:

Working Directory → Staging Area → Local Repository → Remote Repository
    (git add)         (git commit)        (git push)

4. Преимущества Git:
   - Хранение полной истории изменений
   - Возможность работать офлайн
   - Ветвление (branches)
   - Совместная работа
   - Резервное копирование

5. Основные состояния файлов:
   - Untracked: новые файлы
   - Modified: измененные файлы
   - Staged: файлы, готовые к коммиту
   - Committed: зафиксированные изменения

6. Работа с ветками:
"""
# Создать новую ветку
git branch new_feature

# Переключиться на ветку
git checkout new_feature

# Создать и переключиться (2-в-1)
git checkout -b new_feature

# Слияние веток
git merge new_feature

"""
7. Восстановление данных:
   - git checkout: временный просмотр
   - git reset: отмена изменений
   - git revert: безопасная отмена
   - git stash: временное сохранение

8. Рекомендации:
   - Делать частые коммиты
   - Писать понятные сообщения коммитов
   - Использовать ветки для новых функций
   - Регулярно синхронизироваться с удаленным репозиторием
"""

8. Как вставить картинку в маркдаун? 

"""
В Markdown есть несколько способов вставить изображение:

1. Базовый синтаксис:
"""
![Alt текст](путь/к/изображению.jpg)

"""
2. С заголовком (title):
"""
![Alt текст](путь/к/изображению.jpg "Заголовок изображения")

"""
3. Ссылка на изображение в интернете:
"""
![Logo](https://example.com/image.jpg)

"""
4. Изображение с HTML (больше контроля):
"""
<img src="путь/к/изображению.jpg" alt="Alt текст" width="300" height="200">

"""
5. Изображение-ссылка (кликабельное):
"""
[![Alt текст](путь/к/маленькому.jpg)](путь/к/большому.jpg)

"""
6. Относительные пути (в репозитории):
"""
![Image](/images/photo.jpg)  # от корня репозитория
![Image](../images/photo.jpg)  # уровень выше
![Image](./images/photo.jpg)  # текущая директория

"""
7. Примеры использования:
"""
# Простое изображение
![Python logo](python-logo.png)

# С указанием размеров
<img src="python-logo.png" width="100">

# Изображение из интернета
![GitHub](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png)

# Изображение в таблице
| Колонка 1 | Колонка 2 |
|-----------|-----------|
| ![Alt](img1.jpg) | ![Alt](img2.jpg) |

"""
8. Рекомендации:
   - Используйте описательный Alt текст
   - Оптимизируйте размер изображений
   - Проверяйте относительные пути
   - Храните изображения в отдельной папке
"""

9. Где посмотреть длину строки в vs code?

"""
В VS Code есть несколько способов отслеживать длину строки:

1. Статус бар (внизу):
   - В правом нижнем углу показывает "Ln (строка), Col (колонка)"
   - Например: 'Ln 5, Col 79'

2. Линейка (ruler):
   Добавить в settings.json:
"""
{
    "editor.rulers": [79],  // одна линия
    // или несколько линий
    "editor.rulers": [79, 100, 120]
}

"""
3. Через командную палитру:
   - Ctrl + Shift + P (Windows/Linux)
   - Cmd + Shift + P (Mac)
   - Введите 'Go to Line/Column'
   - Или используйте Ctrl + G

4. Автоматическое предупреждение:
   Настройка линтера (например, flake8) в settings.json:
"""
{
    "python.linting.flake8Enabled": true,
    "python.linting.flake8Args": [
        "--max-line-length=79"
    ]
}

"""
5. Автоматический перенос:
   В settings.json:
"""
{
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 79,
    "editor.wrappingIndent": "indent"
}

"""
6. Горячие клавиши для навигации:
   - End: конец строки
   - Home: начало строки
   - Alt + Z: включить/выключить перенос строк

7. Рекомендации по PEP 8:
   - Код: максимум 79 символов
   - Комментарии/docstrings: максимум 72 символа
"""

10. Как поменять тип ячейки с питона на маркдаун?

"""
В Jupyter Notebook/VS Code есть несколько способов изменить тип ячейки:

1. Горячие клавиши:
   - M: переключить на Markdown
   - Y: переключить на Python
   
2. Через командную строку ячейки:
   - Esc + M: для Markdown
   - Esc + Y: для Python

3. Через выпадающее меню:
   - Нажать на селектор типа ячейки сверху
   - Выбрать нужный тип (Markdown/Code)

4. Через командную палитру:
   - Ctrl + Shift + P
   - Набрать 'Change Cell to Markdown' или 'Change Cell to Code'

5. Через контекстное меню:
   - Правый клик на ячейке
   - Выбрать 'Change Cell Type'
   - Выбрать нужный тип

Типы ячеек:
- Code: для Python кода
- Markdown: для форматированного текста
- Raw: для неформатированного текста

Пример Markdown синтаксиса:
# Заголовок 1
## Заголовок 2
**жирный**
*курсив*
- список
1. нумерованный список
[ссылка](url)
![изображение](url)
"""

11. Как запустить сразу все ячейки в юпитере?

"""
В Jupyter Notebook есть несколько способов запустить все ячейки:

1. Горячие клавиши:
   - Ctrl + Alt + R (Windows/Linux)
   - Cmd + Alt + R (Mac)

2. Через меню:
   - Cell -> Run All
   - Kernel -> Restart & Run All

3. Через кнопки на панели инструментов:
   - ▶️ (треугольник) с двумя линиями

4. Дополнительные команды для запуска:
   - Run All Above: запустить все ячейки выше текущей
   - Run All Below: запустить все ячейки ниже текущей
   
5. Через командную палитру:
   - Ctrl + Shift + P
   - Набрать 'Run All'

Важные комбинации для работы с ячейками:
- Shift + Enter: запустить текущую ячейку и перейти к следующей
- Ctrl + Enter: запустить текущую ячейку
- Alt + Enter: запустить текущую и создать новую

Рестарт ядра:
- Kernel -> Restart: только перезапуск
- Kernel -> Restart & Clear Output: перезапуск и очистка
- Kernel -> Restart & Run All: перезапуск и запуск всех ячеек
"""

12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?

"""
В Jupyter Notebook можно изменить размер изображения несколькими способами:

1. HTML-способ (самый гибкий):
"""
<img src="image.jpg" width="300" height="200">

"""
2. Markdown с HTML-атрибутами:
"""
![alt text](image.jpg | width=300)

"""
3. Через параметры Markdown-ячейки:
"""
![alt text](image.jpg){width=300px height=200px}

"""
4. Используя IPython.display:
"""
from IPython.display import Image
Image('image.jpg', width=300, height=200)

"""
5. Используя HTML-стили:
"""
<img src="image.jpg" style="width:300px;height:200px;">

"""
Примеры разных вариантов размеров:

1. Фиксированные пиксели:
"""
<img src="image.jpg" width="500">

"""
2. Проценты от ширины ячейки:
"""
<img src="image.jpg" width="50%">

"""
3. Только ширина (сохраняя пропорции):
"""
<img src="image.jpg" width="300">

"""
4. Максимальная ширина:
"""
<img src="image.jpg" style="max-width:500px">

"""
Рекомендации:
1. Лучше указывать только ширину для сохранения пропорций
2. Использовать проценты для адаптивности
3. HTML-способ дает больше контроля
4. Для простых случаев достаточно Markdown
"""

13. Какой хоткей чтобы запустить ячейку с смещением на следующую?

Shift + Enter: запускает текущую ячейку и перемещает курсор на следующую

14. Как включить отображение номеров строк в юпитере(Cell line numbers)?

Включить номера строк в Jupyter:
    - View -> Toggle Line Numbers
    - или через меню ячейки: Cell -> Toggle Line Numbers

15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?

"Go To" (Ctrl + G или Cmd + G):
    - Позволяет быстро перейти к определенной строке/столбцу
    - При ошибке: кликнуть на номер строки в трассировке ошибки
    - Или использовать Ctrl + G и ввести номер строки

16. Как очистить вывод ячеек которые уже запущены?

Очистка вывода ячеек:
    - Kernel -> Restart & Clear Output
    - Edit -> Clear All Outputs
    - Для одной ячейки: Cell -> Current Outputs -> Clear

17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?

Работа с несколькими файлами в VS Code:
    - SPLIT: разделение экрана на части
    - Ctrl + \ : разделить вертикально
    - Ctrl + Shift + \ : разделить горизонтально
    - Перетаскивание вкладок
    - Alt + Click: выбор нескольких курсоров

18. Каким сочетанием убирается левый сайдбар?

- Ctrl + B 

19. Кнопка два листочка это наши локальные файлы?

Да, кнопка с двумя листочками (Explorer) показывает локальные файлы проекта

20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?

TypeError: при попытке выполнить операции с несовместимыми типами данных
    (конкретный тип ошибки зависит от контекста)

21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?


22. Что такое валидация?

Валидация - это проверка данных на соответствие определенным правилам или критериям:
    - Проверка типов данных
    - Проверка формата
    - Проверка диапазона значений
    - Проверка обязательных полей

23. Что такое трассировка ошибки?

Трассировка ошибки (traceback):
    - Подробный отчет о последовательности вызовов, приведших к ошибке
    - Показывает путь выполнения кода
    - Содержит номера строк и типы ошибок
    - Помогает в отладке

24. Что значит отвалился интерпритатор?

"Отвалился интерпретатор" означает:
    - Интерпретатор Python перестал отвечать
    - Требуется перезапуск ядра Jupyter
    - Может произойти из-за:
        - Нехватки памяти
        - Бесконечных циклов
        - Системных ошибок
