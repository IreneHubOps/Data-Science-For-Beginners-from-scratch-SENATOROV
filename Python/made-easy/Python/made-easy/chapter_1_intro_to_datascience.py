"""Chapter 1 notes for Made easy."""

# # Введение в Data Science
# *Data Science* - это научная дисциплина,
# которая включает в себя извлечение информации
# из огромных объемов данных

# с использованием различных научных методов,
# алгоритмов и процессов.
# Эта наука помогает обнаруживать
# в необработанных данных скрытые закономерности.

# ## Зачем нам Data Science?
# Эта наука помогает:
# 1. Задавать правильные вопросы
# 2. Находить основную причину проблемы
# 3. Находить закономерности среди,
# хаотичных необработанных данных
# 4. Создавать модели для предиктивного анализа

# 5. Визуализировать и отображать
# результаты с помощью графиков,
# информационных панелей и т. д.
# 6. Наделять машины интеллектом
# 7. Определять лояльность клиентов
#  с помощью анализа настроений
# 8. принимать более качественные и быстрые решения
# 9. Рекомендовать правильный продукт
# нужному клиенту для развития нашего бизнеса.

# ## История Data Science
# - Около 18 000 года до н. э. Кость Ишанго,
# один из самых доисторических
# свидетельств хранения данных.
# Палеолитические племена делали зарубки на палках
# для подсчета количества запасов пищи.
#

# - Около 2400 года до н. э. в Вавилоне появились
# счёты — первые устройства для вычислений,
# а также возникли первые библиотеки
# для массового хранения данных.

# - 1663 год ученый Джон Граунт проводит
#  первый эксперимент по статистическому
# анализу данных, для того чтобы разработать систему раннего
# предупреждение о бубонной чуме

# - 1880 год  инженер Герман Холлерит создает
# Табулирующую машину Холлерита,
# сокращая 10 лет обработки данных до 3 месяцев,
# основанная им компания называется IBM.
# - 1928 год Фриц Пфлеумер
# изобрел жесткий магнитный диск
# - 1991 год Ученый-компьютерщик Тим Бернерс-Ли
#   объявил о зарождении Интернета.
# - 1997 год появился сервис Google Search. "

# ## Настоящее и будущее Data Science
# Развитие Data Science идет нескольким направлениям:
# - Искусственный интеллект (ИИ) - направление,
#  в которой основное внимание
# уделяется созданию интеллектуальных машин,
#  способных работать и принимать
# решения как человек.
# - Машинное обучение - это инструмент для
# извлечения знаний из данных.
# В машинном обучении модели могут обучаться
#  на данных самостоятельно или
# поэтапно: обучение с учителем,
# т. е. на данных, подготовленных человеком,
# или обучение без учителя.

# -  Глубокое обучение - это создание многослойных
#  нейронных сетей в областях,
#  где требуется более продвинутый или быстрый анализ.
# - Большие данные - это работа с огромными объемами
# часто неструктурированных данных.
# Специалист по Data Science - это человек,
#  который разбирается в статистике
# лучше любого программиста
# и программирует лучше любого статистика» (Джош
# Уиллс).
# Специалист по Data Science анализирует бизнес-данные,
# извлекая из них важную
# информацию.

# # Основы компьютерного программирования
# Компьютер - это послушный, но не слишком умный слуга.
# Он делает в точности
# то, что мы ему говорим, ни больше ни меньше.
#  Следовательно, когда мы даем компьютеру инструкции
#  (посредством программ),
#  эти инструкции должны быть конкретными и последовательными.
#
# Алгоритм - это конечная последовательность четко определенных,
# реализуемых компьютером инструкций для решения
#  какой-то проблемы или для выполнения вычислений.

# ### Операторы алгоритмов, которые могут
# присутствовать в различных комбинациях
# 1. Последовательные операторы.
# 2. Условные операторы.
# 3. Циклы или итерации.
# ## Блок-схемы
# Алгоритмы можно изображать в графической форме
#  с использованием определенных обозначений.
#   Полученное изображение называется блок-схемой.
# ![alt text](image.png)

# ### Язык программирования
# Для того чтобы дать команды (указания) компьютеры
# мы используемы языки программирования,их много.
# Но компьютер понимает только машинный код.
#
#  *Исходный код*- это то, что пишут программисты
#  на всех языках программирования.
#  Это те самые указания,
#  которые мы даем компьютеру,
#  написанные неформатированным текстом.
# Существуют три основных способа перевода
# исходного кода в машинный код:
# - компиляция;
# - интерпретация;
# - сочетание этих двух способов.

#  *Компилятор* - программа, преобразующая
# исходный код в машинный.
#  *Интерпретатор* - компьютерная программа,
# которая выполняет инструкции,
#   написанные на языке программирования,
#   без предварительной компиляции в программу на машинном
# языке.

# Сравнение компилятора и интерпретатора
# 1. И компиляторы, и интерпретаторы преобразуют
# исходный код (текстовые файлы) в машинный язык.
# Основное отличие: компилятор генерирует автономную программу,
# а интерпретатор выполняет действия,
# описанные в высокоуровневом языке.

# 2. После компиляции программы ее исходный
#  код для запуска больше не требуется.
#  У интерпретируемых программ исходный код
#  требуется для запуска программы каждый раз.

# 3. Обычно интерпретируемые программы работают медленнее,
#  чем компилируемые.

# *IDE (Интегрированная среда разработки)* - в этих
# программах есть специальные инструменты,
#  необходимые для написания, отладки
# и компиляции кода. (Используем Visual Studio Code.)

# ## Упражнения
# Ответы на вопросы
# 1. *Какие предметные области входят в Data Science?*
#  *Что между ними общего и в чем различие?*
# Предметные области в DS: программирование, статистика, базы данных,
# моделирование.
#  Они похожи тем, что необходимы для анализа
# и получения результатов из большого объема данных,
# а также для нахождения закономерностей на их основе.

# Эти области тесно связаны между собой: например,
# чтобы создать модель,
# сначала нужно извлечь данные (базы данных),
# затем очистить их (программирование),
# а после этого провести моделирование
# (статистика и программирование).

# Они различаются тем, что решают задачи разного типа.
# Для хранения данных используются базы данных,
# для выявления закономерностей — статистика и т. д.

# 2. *Как вы понимаете термин «алгоритм»?*
# *Как алгоритмы связаны с блок-схемами?*
#  Алгоритм - это последовательность действий для решения задач.
#   Алгоритмы удобно изображать в виде блок-схем,
#  в начале алгоритм пишем на естественном языке,
#  далее переводим в блок-схему , а только затем пишем код на ЯП.

# 3. *Какую программу можно назвать хорошей?*
# *Запишите все характеристики, какие удастся придумать.*
# Программа, чтобы ее можно было назвать хорошей должна:
# 1) Выполняться быстро
# 2) Занимать как можно меньше памяти
# 4) Содержать как можно меньше багов

# 4. *Какой язык понимает компьютер?*
# Компьютер понимает машинный код,
# который состоит из 0 и 1.
#  Машинный код который представлен последовательностями 0 и 1.

# 5. *Чем языки программирования отличаются от языков,*
# *на которых мы говорим?*
# Тем что, ЯП в первую очередь предназначены
#  для выполнения инструкции,
# которые мы задаем в коде компьютеру.
# ЯП абстракты, на нем человеку было бы сложно пообщаться.
# Человеческий язык предназначен для взаимодействия с социумом,
#  он прост для общения с людьми.

# ## Правда или ложь
# 1. Правда
# 2. Ложь
# 3. Ложь
# 4. Правда
# 5. Ложь
# 6. Ложь
# 7. Правда
# 8.  Ложь
# 9. Правда
# 10. Ложь

# ## Практические задания
# 1. Алгоритм для расчета простых процентов от некоторой суммы.
# Шаг 1: Объявляем сумму
# Шаг 2: Объявляем процентное значение, который хотим найти
# Шаг 3: Умножаем сумму (шаг 1) на процентное значение (шаг 2)
# Шаг 4: Делим получившееся значение(шаг 3) на 100.
# Шаг 5: Выводим результат.

summa: float = 400
# Шаг 1: Вводим сумму
percent: float = 30
# Шаг 2: Вводим процентное значение, который хотим найти
value: float = summa * percent
# Шаг 3: Умножаем сумму (шаг 1) на процентное значение (шаг 2)
result: float = value / 100
# Шаг 4: Делим получившееся значение(шаг 3) на 100.
print(result)  # Шаг 5: Выводим результат.

# 2. Алгоритм для вычисления площади прямоугольника.
# Шаг 1: Объявляем стороны прямоугольника ( длину и ширину)
# Шаг 2: Умножаем обе стороны
# Шаг 3: Выводим результат

# +
length: int = 17  # Шаг 1: Объявляем стороны прямоугольника ( длину и ширину)
width: int = 10

area: int = length * width  # Шаг 2: Умножаем обе стороны

print(area)  # Шаг 3: Выводим результат
# -

# 3. Алгоритм вычисления периметра круга.
# Шаг 1: Вводим радиус круга
# Шаг 2: Вычисляем периметр
# Шаг 3: Выводим результат

# +
circle_radius: float = 8
# Шаг 1: Вводим радиус круга

perimeter: float = 2 * 3.14 * circle_radius
# Шаг 2: Вычисляем периметр

print(perimeter)
# Шаг 3: Выводим результат
# -

# 4. Напишите алгоритм,
# который находит все простые числа меньше 100.
#
# Шаг 1: Инициализировать пустой список primes
# Шаг 2: Для num от 2 до 99:
#     is_prime = истинно
#
#     Шаг 3: Для i от 2 до √num:
#         Если num % i = 0:
#             is_prime = ложь
#             Прервать цикл
#
#     Шаг 4: Если is_prime:
#         Добавить num в список primes
# Шаг 5: Вывести список primes

# 5. Напишите алгоритм превращения предложения,
# написанного в верхнем регистре,
#  в обычный для предложений регистр.
#
# Шаг 1: Ввод предложения в верхнем регистре
# Шаг 2: Инициализировать пустую строку normal_case
# Шаг 3: Для каждого символа в предложении:
#     Если символ является буквой:
#         Добавить символ в normal_case в нижнем регистре
#     Иначе:
#         Добавить символ в normal_case без изменений
# Шаг 4: Вывести normal_case
#

# 6. Составьте блок-схему приготовления льда
# из кипяченой воды с помощью холодильника.
# ![alt text](diagram_6.png)

# 7. Составьте блок-схему для нахождения суммы всех четных чисел меньше ста.
# ![alt text](diagram_7.jpg)

# 8.  Составьте блок-схему для вычисления
#  квадрата всех нечетных чисел от 1 до 15 включительно
# ![alt text](diagram_8.png)

# 9. Составьте блок-схему
#  вывода таблицы умножения на 3.
# ![alt text](diagram_9.png)

# 10. Составьте блок-схему для расчета
#  сложных процентов (с капитализацией).
# ![alt text](diagram_10.png)
