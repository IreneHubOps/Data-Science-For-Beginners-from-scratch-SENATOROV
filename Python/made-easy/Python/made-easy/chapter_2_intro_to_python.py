"""Chapter 2 notes for Made easy."""

# *Python* - это интерпретируемый высокоуровневый язык
#  программирования общего назначения с открытым исходным кодом.

# Python был создан Гвидо ван Россумом
# и впервые выпущен в 1991 году.
# Он поддерживает несколько парадигм программирования,
# включая структурное ( особенно процедурное)
# объектно-ориентированное и функциональное программирование.
#
# Это простой в освоении и очень мощный язык программирования .
# Элегантный синтаксис и динамическая типизация
# Python вместе с его
# интерпретируемостью делают его идеальным языком
# для написания сценариев и
# быстрой разработки приложений во многих областях
# и на множестве платформ

# #### История появления языка
# Язык Python был придуман в конце 1980-х гг. Гвидо ван Россумом, сотрудником
# Centrum Wiskunde & Infonnatica (CWI) в Нидерландах, как преемник языка АВС.
# Его реализация началась в декабре 1989 г.
# Ван Россум был ведущим разработчиком
# Python до 12 июля 20 18 г., после чего ушел в
# «отпуск на неопределенный срок» и
# сложил с себя обязательства «пожизненного самоизбранного диктатора
# в королевстве Python.
#
# 16 октября 2000 r. был выпущен Python 2.0,
# в котором появилось множество новых
# базовых функций, включая сборщик мусора
# с обнаружением циклических ссылок и
# поддержку Unicode.
#
# 3 декабря 2008 r. бьш выпущен Python 3 .0.
# Это была сильно измененная версия
# языка, не имеющая полной обратной совместимости.
# В январе 2017 r. Google
# объявила о работе над транс-компилятором из Python 2. 7 в
# Go для повышения производительности при параллельных нагрузках.
#
# Язык назван в честь шоу на канале ВВС «Летающий цирк Монти Пайтона»
# (Monty Python's Flying Circus) и со змеями никак не связан
#

# #### Python и другие языки программирования
# Python позволяет писать программы компактно и читабельно.
# Программы, написанные на Python, обычно намного короче таких же программ
# на С, С++ или Java по нескольким причинам.
# 1) Типы данных высокого уровня позволяют записывать сложные операции в одну
# строку.
# 2) Группировка операторов выполняется с помощью отступов, а не с помощью
# скобок в начале и конце блока.
# 3) Объявление переменных или аргументов не требуется

# ####  Философия Python
# Основная философия языка кратко изложена в документе
# Zen of Python, в котором
# можно найти такие афоризмы, как:
# 1) Красивое лучше, чем уродливое.
# 2) Явное лучше, чем неявное.
# 3) Простое лучше, чем сложное.
# 4) Сложное лучше, чем запутанное.
# 5) Читаемость имеет значение.

# ## **Преимущества Python по сравнению с другими языками**
# 1. *Простота*
# Python по простоте напоминает «дисциплинированный английский».
# 2. *Свободный и открытый исходный код*
# Python распространяется по модели
# FLOSS (Free/Libre and Open Source Software).
# Проще говоря, вы можете открыто распространять
# дубликаты этого продукта, читать его исходный код,
# вносить в него изменения и использовать его в бесплатных
# проектах
# 3. *Высокоуровневость*
# Язык программирования высокого уровня - это язык,
# в котором вам не приходится думать о множестве деталей,
# которые нужны при использовании языка
# программирования низкого уровня
# 4. *Портативность*
# Портативность означает, что Python можно
# использовать на разных типах машин,
# независимо от аппаратных средств
# или ограничений операционной системы.
# Благодаря открытому исходному коду
# Python был перенесен на многие платформы,
# и его можно использовать в Windows, GNU/Linux,
# Macintosh, Solaris, Palm OS,
# PlayStation, Sharp Zaurus, Windows СЕ и PocketPC!
# 5. *Интерпретируемость*
# Python не требует компиляции в двоичный код,
# а ваша программа запускается прямо из исходного кода.
# Внутри Python преобразует исходный код в промежуточную
# форму, называемую байт-кодами, затем переводит
# ее на родной язык компьютера
# и запускает.
#

# ### Интерпретаторы Python
# 1. **IPython**
# это альтернативный интерпретатор Python.
# Это интерактивная оболочка,
# которая используется для вычислений на Python.
# В ней гораздо больше полезных
# функций по сравнению с интерпретатором Python,
# используемым по умолчанию.
# 2. **CPython**
# Написан на С и Python, CPython можно в какой-то степени считать
# компилятором, поскольку перед интерпретацией
# он преобразует код Python в байт-код.
# В нем используется GIL (глобальная блокировка интерпретатора),
# которая ограничивает возможности интерпретатора,
# поскольку она отключает параллельные
# потоки Python в рамках одного процесса.
# 3. **lronPython**
# Это реализация языка программирования
# Python для платформы .NET, в которой используются
# библиотеки Python и .NET.
# IronPython напрямую интегрируется в среду
# разработки Visual Studio.
# 4. **Jython**
# Ранее известная как JPython, реализация Jython работает на
# платформе Java. Это сочетание Java и Python преобразует
# код Python в байт-код Java и, следовательно, позволяет запускать код Python на любой машине, на которой установлена JVМ.
# 5. **РуРу** - это быстрая и совместимая альтернативная
# реализация языка программирования Python
# интерпретатор Python реализован в RPython,
# который представляет
# собой ограниченное статически типизированное подмножество
# языка программирования Python
# благодаря JIT-компилятору РуРу поддерживает
# серверные части С, CLI и NM. Основная цель РуРу - обеспечить
# максимальную
# совместимость с эталонной реализацией CPython и в то же
# время увеличить производительность.
# 6. **PythonNet**
# Позволяет выполнить почти бесшовную интеграцию
# Python с .NET CLR. При использовании вместе с Mono,
# PythonNet позволяет встроенным в операционные
# системы установкам Python (кроме
# Windows) работать в среде .NET. PythonNet можно
# использовать совместно с IronPython без каких-либо проблем.
# 7. **Stackless Python**
# Stackless Python написан с использованием С и Python
# Самая важная особенность Stackless Python - это наличие
# микропотоков.
# Эта возможность помогает избежать
# значительной части накладных: расходов,
# связанных с обычными
# потоками операционной системы.
#

# #### **Объектная ориентированность**
# Python поддерживает процедурно-ориентированное
# программирование, а также
# объектно-ориентированное программирование.
# В Python очень мощный, но упрощенный
# стиль объектно-ориентированного
# программирования, особенно по сравнению
# с такими крупными языками, как С++
# или Java.
#

# #### **Расширяемость**
# Python легко расширяется с помощью кода C/C++/Java и легко встраивается в приложения.

# #### **Встраиваемость**
# Код Python можно встраивать в программы на С/С++

# #### **Внушительные библиотеки**
# Стандартная библиотека Python,
# которую обычно упоминают как одну из сильнейших
# сторон этого языка, содержит инструменты,
# подходящие для огромного множества задач.
# По состоянию на март 20 18 г. официальный репозиторий для стороннего программного обеспечения Python под названием PyPI (Python Package lndex) содержал
# более 1 30 ООО пакетов с широким набором функций,
# вот некоторые из них:
# - графические пользовательские интерфейсы;
# - веб-фреймворки;
# - мультимедиа;
# - базы данных;
# - сети;
# - фреймворки тестирования;
# - автоматизация;
# - парсинг веб-страниц;
# - документация;
# - системное администрирование;
# - научные вычисления;
# - обработка текста;
# - обработка изображений.
#

# ### **Версии Python**
# - Python 2
# Вышел в конце 2000х, появились документы РЕР (Python Enhancement Proposal),в Python 2 появилось множество других функциональностей, например сборщик мусора
# с обнаружением циклов для автоматизации
# управления памятью, расширенная поддержка
# Unicode для стандартизации символов и списочные включения.
# -  Python 2. 7
# После выпуска Python 3.0 в 2008 г., 3 июля 20 10 г. вышел Python 2.7, который планировался как последний выпуск в линейке версий 2.х. Целью Python 2. 7 было облегчить пользователям Python 2.х переход на Python 3 и предоставить совместимость между этими версиями.
# - Python 3
# Эта версия языка в настоящее время
# находится в разработке.
# Основное внимание при разработке Python 3
# уделялось очистке кодовой базы и
# устранению избыточности, чтобы для каждой
# задачи существовал лишь один способ ее выполнения.
# К основным изменениям
# в Python 3 .0 можно отнести превращение
# оператора print во встроенную функцию,
# улучшение методики деления целых чисел и
# расширение поддержки Unicode
# На данный момент 339 из 360 наиболее популярных
# пакетов поддерживаются в Python 3.

# ## **Дистрибутив Anaconda**
# Это самый простой способ
# выполнять анализ данных с помощью языков
# Python/R и машинное обучение
# в Linux, Windows и MacOS. У дистрибутива больше
# 11 миллионов пользователей
# по всему миру, он является отраслевым
# стандартом в области разработки, тестирования и
# машинного обучения и позволяет специалистам по данным:
# 1. быстро загрузить более 1 500 пакетов Python/R, предназначенных для задач анализа данных;
# 2. управлять библиотеками, зависимостями и средами с помощью Conda;
# 3. разрабатывать и обучать модели машинного обучения и глубокого обучения
# с помощью пакетов Scikit-leam, TensorF\ow и Theano;
# 4. выполнять эффективный и масштабируемый анализ данных с помощью Dask,
# NumPy, Pandas и Numba;

# ### **Jupyter Notebook**
# Этот редактор расширяет консольный подход к интерактивным вычислениям в качественно новом направлении и сконструирован как веб-приложение, подходящее
# для записи всего вычислительного процесса: разработки, документирования и выполнения кода, а также передачи результатов. Jupyter Notebook объединяет в себе
# два компонента:
# 1. веб-приложение - инструмент на основе браузера,
# предназначенный для интерактивного создания документов,
# сочетающий в себе пояснительный текст,
# математические вычисления и мультимедийный вывод результатов;
# 2. документы Notebook, содержащие
# все видимое в веб-браузере, включая входные
# и выходные данные вычислений, пояснительный текст, математические данные,
# изображения и мультимедийные представления объектов.

# ### **Упражнения**
# Ответьте на вопросы
# 1. Python - это программное обеспечение с открытым исходным кодом. Это то
# же самое, что и бесплатное ПО? Да, а так же с открытым исходным
# кодом означает, что можно добавлять свои модули/функции в ПО.
# 2. У всех ли бесплатных программ открытый исходный код? А если нет, то в чем
# разница? Как упоминалась выше,  открытый исходный код - это код который полностью
# доступен в сети, т.е мы сможем найти его в Github. Может быть и такое,
# что приложение просто бесплатно в использовании, но код закрытый.
# 3. Python поддерживает динамическую типизацию.
# Что это такое?  Это значит, что перед тем как объявить
# переменную не обязательно указывать тип данных.
# 4. Назовите 5 самых популярных языков
# программирования для специалистов по
# анализу данных
#  - Python, R, C++,SQL,Scala.
# 5. В чем заключается преимущество Python по сравнению с языком С?
# Преимущество заключается в простоте синтаксиса, высокоуровнестью
# и так как он прост , значит большиство разработчиков ПО будут писать пакеты,
# библиотеки для python.
# 6. Python портативен. Что в этом контексте
# означает «портативность»?
# Можно использовать на разных ОС, для написания программ IOT.
# 7. В чем разница между «расширяемым» и «встраиваемым» языком?
# Расширяемый - можно дописывать свои модули и функции.
# Встраиваемый - можно встроить код на других ЯП.
# 8. В чем смысл IDE? Чем она отличается от командной строки?
# Помогает писать код качественно, без лишних багов. Его придумали,
# чтобы облегчить работу программистам. Он подсвечивает разными
# цветами код, чтобы легко ориентироваться. Сохранять код и запускать.
# 9. Как открыть существующий документ Jupyter Notebook?
# Чем эта процедура отличается от открытия РDF-файла или текстового файла?
# Когда открываем существующий документ Jupyter Notebook,
# работает один интерактивный сеанс, подключенный к ядру,
# которое будет выполнять пользовательский
# код и возвращать результаты
# 10. В чем разница между «ячейками разметки Markdown» и «ячейками кода»
# в Jupyter Notebook? Для чего они нужны?
# Markdown - пишем разъяснение кода, а в ячейку кода сам код.
#
#

# ### **Правда или ложь**
# 1. Ложь
# 2. Правда
# 3. Ложь
# 4. Ложь
# 5. Ложь
# 6. Правда
# 7. Ложь
# 8. Правда
# 9. Правда
# 10. Ложь
