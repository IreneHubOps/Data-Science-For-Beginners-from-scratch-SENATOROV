"""Python - это просто. Глава 2."""

# <font size="5">
#     <b>Введение в Python</b>
# </font>
#

# Python был создан Гвидо ван Россумом и впервые выпущен в 1991 г.
# Он поддерживает несколько парадигм программирования, включая структурное
# (особенно процедурное) объектно-ориентированное и функциональное
# программирование.

# ![image.png](attachment:image.png)

# ♦ Один из самых популярных языков программирования.
#
# ♦ Занимает первое место среди языков-аналогов согласно рейтингам из открытых
# источников или статей по языкам программирования.
#
# ♦ У языка есть большой набор библиотек, инструменты, фреймворки и большое
# сообщество, которое вносит свой вклад в развитие языка.
#
# ♦ Язык хорошо востребован на рынке труда и позволяет получать хорошую зар-
# плату.
#
# ♦ Прост в изучении.

# ### Вехи развития языка:
#
# 1. 1989 - придуман Гвидо ван Россумом как преемник ABC сотрудником Centrum
# Wiskunde & Infonnatica (CWI) в Нидерландах.
#
# 2. 2000 - был выпущен Python 2.0, в котором появилось множество новых
# базовых функций, включая сборщик мусора с обнаружением циклических ссылок и
# поддержку Unicode.
#
# 3. 2008 - был выпущен Python 3.0. Это была сильно измененная версия
# языка, не имеющая полной обратной совместимости.
#
#
# Язык назван в честь шоу на канале ВВС «Летающий цирк Монти Пайтона»
# (Monty Python's Flying Circus) и со змеями никак не связан.

# C/C++/Java имеют медленные циклы записи/компиляции/тестирования/повторной
# компиляции, нуждаются в наборе тестов.
#
# Для некоторых из этих задач можно написать shеll-скрипт для UNIX или Ьаt-файл
# для Windows, но не всегда подходит для программ.
#
# Python - это интерпретируемый язык, позволяющий значительно сэкономить время
# при разработке программы, т.к. компиляция и связывание в нем не выполняются.
# Интерпретатор можно использовать в интерактивном режиме, что позволяет легко
# экспериментировать с функциями языка, писать одноразовые программы или
# тестировать функции во время нисходящей разработки программы. Python позволяет
# писать программы компактно и читабельно

# ♦ Типы данных высокого уровня позволяют записывать сложные операции в одну
# строку.
#
# ♦ Группировка операторов выполняется с помощью отступов, а не с помощью
# скобок в начале и конце блока.
#
# ♦ Объявление переменных или аргументов не требуется.
#
# Можно связать интерпретатор Python с приложением, написанным на С, и
# использовать его как расширение или командный язык для этого приложения.

# ### Преимущества Python по сравнению с другими языками:
#
# 1. Простота
#
# 2. Легкость в изучении
#
# 3. Свободный и открытый исходный код
#
# 4. Высокоуровневость
#
# 5. Портативность
#
# 6. Интерпретируемость
#
# 7. Объектная ориентированность
#
# 8. Расширяемость
#
# 9. Встраиваемость
#
# 10. Внушительные библиотеки

# Интерпретатор - это разновидность компьютерной программы, которая
# непосредственно выполняет инструкции, написанные на каком-либо языке
# программирования или языке сценариев.
#
# ### Интерпретаторы Python:
#
# 1. IPython 
#
# Интерпретатор по умолчанию (команда python в командной строке), используется
# с Jupyter Notebook. В этой интерактивной оболочке гораздо больше полезных
# функций по сравнению с интерпретатором Python, используемым по умолчанию.
#
# 2. CPython
#
# CPython содержит много внешних функций С и связан с другими языками
# программирования. CPython можно в какой-то степени считать компилятором,
# поскольку перед интерпретацией он преобразует код Python в байт-код.
# В нем используется GIL (глобальная блокировка интерпретатора).
#
# 3. IronPython
#
# IronPython - это реализация языка программирования Python для платформы .NET,
# в которой используются библиотеки Python и .NET.
#
# 4. Jython
#
# Ранее известная как JPython, реализация Jython работает на платформе Java. Это
# сочетание Java и Python преобразует код Python в байт-код Java.
#
# 5. PyPy
#
# Реализован в RPython, который представляет собой ограниченное статически
# типизированное подмножество языка программирования Python. Поддерживает
# серверные части С, CLI и NM. Основная цель РуРу - обеспечить максимальную
# совместимость с эталонной реализацией CPython и в то же время увеличить
# производительность.
#
# 6. PythonNet
#
# PythonNet позволяет выполнить почти бесшовную интеграцию Python с .NET CLR.
# Подход этого интерпретатора можно считать противоположным тому, которому
# следует IronPython.
#
# 7. Stackless Python
#
# Stackless Python используется стек С, но между вызовами функций он очищается.
# Интерпретатор Python в работе со стеком не зависит от вызова С. Как и CPython,
# Stackless Python написан с использованием С и Python. Важная особенность - это
# наличие микропотоков. Эта возможность помогает избежать значительной части
# накладных: расходов, связанных с обычными потоками операционной системы.

# ### Версии Python:
#
# 1. Python 2
#
# Появились документы РЕР (Python Enhancement Proposal), в которых излагаются
# информация по Python и описание новых функций. Также есть сборщик мусора с
# обнаружением циклов для автоматизации управления памятью, расширенная
# поддержка Unicode для стандартизации символов и списочные включения.
# Объединение типов и классов Python в одну иерархию в версии Python 2.2.
#
# 2. Python 2.7
#
# Цель Python 2. 7 - облегчить пользователям Python 2 переход на Python 3 и
# предоставить совместимость между этими версиями. Поддержка совместимости 
# заключалась в добавлении в версию 2.7 новых модулей, таких как unittest для
# автоматизации тестирования, argparse для анализа параметров командной строки,
# а также более удобные классы в коллекциях. 
#
# 3. Python 3
#
# Основное внимание при разработке Python 3 уделялось очистке кодовой базы и
# устранению избыточности, чтобы для каждой задачи существовал лишь один способ
# ее выполнения.
#
#
# Дистрибутив Anaconda - это самый простой и наиболее часто используемый способ
# установки Python и других необходимых пакетов. Он находится в свободном
# доступе и прост в установке.
#
# В дистрибутиве Anaconda дополнительно реализовано много полезных
# функциональностей, которые упрощают работу начинающим программистам.
#
# ♦ Возможность выбора и установки нужной вам версии Python.
#
# ♦ Возможность установки/обновления пакетов совершенно независимо от
# системных библиотек или прав администратора.
#
# ♦ Инструмент Conda устанавливает бинарные пакеты и не требует компиляции
# ресурсов, таких как pip, что тоже удобно, если вы ограничены в правах
# установки необходимых библиотек.
#
# ♦ Частичное избавление от головной боли на предмет того, какая версия пакета Х
# совместима с какой версией пакета У, когда оба они требуются для установки
# пакета Z.
#
# ♦ Возможность загрузки либо полной версии, с NumPy, Scipy, PyQt, Spyder IDE
# и т. д., либо в минимальной комплектации (miniconda), где можно выбрать
# только нужные компоненты.
#
# ♦ Отсутствие риска испортить системные библиотеки.

# Командная строка - это приложение, которое позволяет запускать команды для
# просмотра папок и файлов, выполнения скриптов и, конечно, для работы с Python.
#
# ### Наиболее используемые программы Anaconda Navigator:
#
# ♦ Консоль IPython
#
# Во многом похоже на командную строку, но с дополнительными функциями, которые
# можно реализовать только в графическом интерфейсе, такими как встраивание
# рисунков, правильное многострочное редактирование с подсветкой синтаксиса,
# подсказки и т.д.
#
# ♦ Spyder
#
# Бесплатная интегрированная среда разработки (IDE). Отличается уникальным
# сочетанием функций редактирования, анализа, отладки и профилирования,
# присущих сложным инструментам разработки, и функций исследования данных,
# интерактивного выполнения, глубокой проверки и большими возможностями
# визуализации, присущими научному программному обеспечению.
#
# Компоненты: редактор текста, IPython консоль, обозреватель переменных,
# справка
#
# ♦ Jupyter Notebook
#
# Сконструирован как веб-приложение, подходящее для записи всего вычислительного
# процесса: разработки, документирования и выполнения кода, а также передачи
# результатов. Объединяет в себе два компонента:
# - веб-приложение - инструмент на основе браузера, предназначенный для
# интерактивного создания документов, сочетающий в себе пояснительный текст,
# математические вычисления и мультимедийный вывод результатов;
# - документы Notebook, содержащие все видимое в веб-браузере, включая входные
# и выходные данные вычислений, пояснительный текст, математические данные,
# изображения и мультимедийные представления объектов.
#
# Можно запустить код Python из браузера и получить прикрепленные к коду
# результаты вычислений. Отображение результатов вычислений выполняется с
# использованием мультимедийных форматов, таких как м, LaTeX, PNG, SVG.
#
# Эти документы являются внутренними файлами JSON и сохраняются с расширением
# ipynb.
# Поскольку JSON - это неформатированный текст, эти файлы также можно
# включать в контроль версий и делиться ими с коллегами.
#
# Документы Notebook можно экспортировать в некоторые статические форматы,
# например, HTML (для публикации в блогах), Restructured Text, LaTeX, PDF и
# слайд-шоу, с помощью команды nbconvert. Любой документ Notebook формата ipynb,
# доступный по публичному URL-адресу, можно опубликовать через Jupyter Notebook
# Viewer (nbviewer) как статическую веб-страницу.
#
# Можно запустить сервер Notebook из командной строки, используя команду:
# "Jupyter notebook". В консоли появится некоторая информация о сервере, после
# чего в веб-браузере откроется URL-адрес веб-приложения (по умолчанию
# http://127.0.0.1:8888).
#
# Notebook состоит из последовательности ячеек. Ячейка представляет собой
# многострочное текстовое поле ввода, содержимое которого можно выполнить либо с
# помощью комбинации клавиш <Shift>+<Enter>, либо путем нажатия кнопки Play на
# панели инструментов, либо с помощью пункта меню Cell|Run. Поведение ячейки
# при ее выполнении зависит от типа ячейки. 
#
# #### Типы ячеек:
#
# 1. Ячейки кода
#
# Позволяет редактировать и писать новый код с выделением синтаксиса
# цветом и заполнением табуляцией.
#
# 2. Ячейки разметки Markdown
#
# Язык Markdown - это простой способ выполнить разметку текста и указать, какой
# текст нужно выделить курсивом, какой жирным шрифтом, где вставить список.
#
# Заголовки на языке Markdown обозначаются с помощью от I до 6 знаков решетки #,
# за которыми следует пробел и заголовок раздела. Заголовок Markdown
# преобразуется в интерактивную ссылку на этот раздел документа. Markdown также
# допускает форматирование с помощью HTML-кода.
#
# Можно напрямую включать математику, используя стандартную нотацию LaTeX: для
# внутристрочных выражений или для больших формул.Разметка LaTeX автоматически
# конвертируется в HTML с качественной типографикой (благодаря MathJax)
#
# 3. Ячейки без формата
#
# Неформатированные ячейки не анализируются документом и при передаче через
# nbconvert никак не преобразуются, и текст передается «как есть». 
#
# #### Горячие клавиши
# Прервать вычисление - меню Kernel|Interrupt или два раза клавиша i. 
#
# Перезапустить весь вычислительный процесс - Kernel|Restart или два раза
# клавиша 0.
#
# Shift + Enter - выполнить код в ячейке
#
# Esc - командный режим. В командном режиме вы можете перемещаться по
# документу с помощью сочетаний клавиш.
#
# Enter - режим редактирования.
# В режиме редактирования вы можете редактировать текст в ячейках.
#
# H (в командном режиме) - получение списка всех доступных сочетаний клавиш.

# Jupyter Notebook поддерживает последние версии следующих браузеров:
#
# ♦ Chrome
#
# ♦ Safari
#
# ♦ Firefox
#
# ♦ Edge.
#
# При использовании Safari с HTTPS и ненадежным сертификатом приложение не
# работает (а точнее, не работают веб-сокеты).

# 1. Python - это программное обеспечение с открытым исходным кодом. Это то
# же самое, что и бесплатное ПО?
#
# Нет, открытый исходный код - это возможность просмотра кода, который имеют
# программы. Бесплатное ПО - сама программа бесплатная (скорее всего без доступа
# к коду)
#
# 2. У всех ли бесплатных программ открытый исходный код? А если нет, то в чем
# разница?
#
# Не у всех. Зависит от разработчиков и заинтересованности в развитии ПО со
# стороны и политики безопасности.
#
# 3. Python поддерживает динамическую типизацию. Что это такое?
#
# Устанавливается тип переменной во время работы интерпретатора (без компиляции
# типа данных)
#
# 4. Назовите 5 самых популярных языков программирования для специалистов по
# анализу данных.
#
# Python, R,  MATLAB, C++, Java
#
# 5. В чем заключается преимущество Python по сравнению с языком С?
#
# Нет необходимости преобразовывать в байт-код перед интерпретацией.
#
# 6. Python портативен. Что в этом контексте означает «портативность»?
#
# Можно использовать на разных типах машин, независимо от аппаратных средств или
# ограничений операционной системы.
#
# 7. В чем разница между «расширяемым» и «встраиваемым» языком?
#
# Расширяемый - в данный язык можно встроить другие. А встраиваемый - наоборот,
# данный язык можно встроить в другие языки.
#
# 8. В чем смысл IDE? Чем она отличается от командной строки?
#
# IDE - интегрированная среда разработки. В ней имеются функции редактирования,
# интерактивного тестирования, отладки и самоанализа, чего нет в консоли.
#
# 9. Как открыть существующий документ Jupyter Notebook? Чем эта процедура
# отличается от открытия РDF-файла или текстового файла?
#
# Через браузер с помощью команды Jupyter notebook notebook_name.ipynb в
# командной строке или с помощью Anaconda Navigator. Другие файлы откроются
# по умолчанию не в браузере как веб-приложение, а в других ПО.
#
# 10. В чем разница между «ячейками разметки Markdown» и «ячейками кода»
# в Jupyter Notebook? Для чего они нужны?
#
# Ячейка кода для интерпретации кода, когда Markdown помогает документировать
# вычислительный процесс или структурировать файл. Markdown поддерживает HTML.
#
#
# 1. Язык программирования Python был назван в честь змеи питон.
#
# Ложь
#
# 2. Python - это высокоуровневый язык общего назначения.
#
# Правда
#
# 3. Python компилируется и не интерпретируется.
#
# Ложь
#
# 4. В Python команда два + два вернет Четыре.
#
# Ложь
#
# 5. Консоль IPython аналогична окну командной строки.
#
# Правда, но поддерживает встраивание рисунков, правильное многострочное
# редактирование с подсветкой синтаксиса, подсказки и многое другое.
#
# 6. Графики, выводимые в документе Jupyter Notebook, отображаются внутри
# самого документа.
#
# Ложь, так как можно разместить по URL-адресу Notebook с его результатами.
#
# 7. В комплекте с пакетом Anaconda идут браузеры Chrome и Firefox.
#
# Ложь
#
# 8. «Простое лучше, чем сложное» - это одна из философий Python.
#
# Правда
#
# 9. Аббревиатура FLOSS означает «Free/Libre and Open Source Software».
#
# Правда
#
# 10. Python поддерживает ТОЛЬКО объектно-ориентированное программирование.
#
# Ложь, также процедурно-ориентированное программирование.
