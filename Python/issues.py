"""Task issues."""

# 1. Что такое Issues на GitHub и для чего они используются?
#
# Issues - это встроенный инструмент для отслеживания задач,
# багов и предложений в репозиториях GitHub.

# 2. Чем Issues отличаются от других инструментов
#  управления задачами?
#
# Issues интегрированы с Git, связывает задачи с коммитами, пулл-реквестами и ветками для удобного отслеживания изменений и прогресса, с поддержкой автоматизации и совместной работы.

# 3. Какие основные компоненты (поля) есть у каждого Issue?
#
# - Title (Заголовок) -  поле для ввода краткого названия задачи.
#
# - Comment (Описание)- пространство для добавления
# описания задачи или проблемы.
#
# - Assignees (Ответственные) - список пользователей,
#  которым можно назначить задачу.
#
# - Labels (Метки) - Категории для классификации задачи.
#
# - Projects (Проекты) - Связь задачи с определённым проектом.
#
# - Milestone (Милестон) - Этап или временной отрезок,
#  к которому относится задача.
#
# - Development (Разработка) - Отображает ветки, коммиты или пулл-реквесты,
# связанные с Issue.

# 4. Как создать новое Issue в репозитории?
# Выделяем код
# Переходим в репозитории,
# ищем вкладку Issues, нажимаем на нее.
# Нажимаем на New Issue,
# заполняем поля
# Нажимаем на Submit new issue

# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
# - Заголовок
# - Подробно описать проблему
# - Прикрепить скрин или видео
# - Ожидаемый результат
#
# Чем более детальным будет описание Issue,
# тем быстрее и эффективнее будет решена проблема
#

# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# - Приоритет:
# high (высокий)
# medium (средний)
# low (низкий)
# - Тип:
# bug (баг)
# feature (новая функциональность)
# enhancement (улучшение)
# question (вопрос)
# task (задача)
# - Статус:
# open (открыт)
# in progress (в процессе)
# closed (закрыт)
# - Метка:
# critical (критический)
# blocker (блокирующий)
# regression (регрессия)
# duplicate (дубликат)
#

# 7. Как прикрепить Assignees (ответственных) к Issue?
#
# Заходим в Issues,
# ищем поле Assignees
# С помощью @ указываем username

# 8. Как использовать Labels для классификации задач?
# Можно классифицировать проблемы, запросы на вытягивание и обсуждения путем создания, редактирования, применения и удаления меток.
# -  Перейти к issue,PR или обсуждению.
# -  На правой боковой панели нужно нажать на  "Labels",
#  а затем на метку.

# 9. Для чего нужен Milestone, и как связать его с Issue?
# - Нужен для отслеживания хода выполнения
#  в группах issue или PR в репозитории.
#  Чтобы связать с issue нужно выбрать соответствующую
#  веху в поле "Milestone" при создании или редактировании Issue.

# 10. Как привязать Issue к пул-реквесту (Pull Request)?
# Пишем что-то в описание пулл-реквеста,
#  далее Closes и #номер issue

# 11. Как добавить комментарий к существующему Issue?
# Открываем issue и находим поле Add a comment
# и пишем сюда коммент

# 12. Как закрыть Issue вручную?
# В Issue нажимаем на Close issue внизу страницы

# 13. Можно ли автоматически закрыть Issue с
# помощью сообщения в коммите или пул-реквесте? Как это сделать?
# Да,в описании PR или в коммите используем closes #номер_issue

# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
# Открыть закрытое issue и нажать на Reopen issue

# 15. Как найти все открытые или закрытые Issues в репозитории?
# Во вкладке Issues используем фильтры is:open или is:closed в строке поиска
# либо переходим по вкладкам Open или Closed

# 16. Как использовать фильтры для поиска Issues по меткам,
#  исполнителям или другим критериям?
#  В строке поиска Issues используем фильтры, такие как label:, assignee:, milestone:, чтобы сузить результаты по определенным критериям.

# 17. Как сортировать Issues по приоритету,
# дате создания или другим параметрам?
# В issue в правой верхней есть кнопка sort

# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
# Нужно подписаться на уведомления для конкретного репозитория или Issues

# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
# Projects — это настраиваемые рабочие пространства
#  для планирования и отслеживания работы.
# - Переходим к нужному Issue.
# - В правой панели ищем раздел "Projects".
# - Выбираем нужный проект из списка. Если проекта нет, создать его заранее:
# - Перейти на вкладку Projects репозитория.
# - Нажать на  "New Project", выбрать вид (Kanban или таблица) и настройте.
#

# 20. Какие сторонние инструменты можно
#  использовать для автоматизации работы с Issues (например, боты, Webhooks)?
# - GitHub Actions: используем для автоматизации задач,
#  например, добавляем метки или закрываем Issues по событию.
# - Probot: Этот фреймворк позволяет нам создавать ботов,
#  которые автоматически назначают исполнителей,
#  добавляют метки и проверяют описание Issues.
# - Zapier и IFTTT: настраиваем интеграцию GitHub с
#  другими сервисами, такими как
#  Slack или Trello, для уведомлений
#  или автоматического создания задач.
#

# 21. Как упомянуть другого пользователя в комментарии к Issue?
# Тегаем как и везде с помощью @

# 22. Как запросить дополнительные данные или уточнения у автора Issue?
# Задать вопрос в комментах и не забыть упомянуть человека

# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
# Если задача неактуальна, мы закрываем Issue
#  и оставляем комментарий с объяснением.
# Но если задача дублирует другую, указываем ссылку
# на основную задачу (например, См. #123)
# и закрываем как дубликат.

# 24. Как использовать шаблоны для создания Issues?
# Мы создаём шаблоны в папке .github/ISSUE_TEMPLATE в репозитории.

# 25. Что такое Linked Issues, и как создать связь между задачами?
# С его помощью связываем задачи, чтобы показать зависимость между ними. Для этого:
# Открываем Issue.
# В правой панели нажимаем "Linked Issues".
# Указываем связанное Issue или создаём новое.

# 26. Какие метрики (например, время выполнения)
# можно отслеживать с помощью Issues?
#
# - Сколько задач открыто и закрыто.
# - Среднее время выполнения задач.
# - Распределение задач по меткам, исполнителям или проектам.
# - Для визуализации используем GitHub Insights
#  или сторонние инструменты

# 27. Какие best practices рекомендуются при работе с Issues в команде?
# - Мы стараемся писать чёткие и понятные описания.
# - Используем метки и вехи для классификации задач.
# - Назначаем ответственных за каждую задачу.
# - Регулярно обновляем статус Issues.
# - Закрываем задачи, как только работа завершена.
# - Для стандартизации используем шаблоны Issues.
