"""Биномиальное распределение в Python с использованием NumPy и Matplotlib."""

import matplotlib.pyplot as plt  # matplotlib для визуализации данных
# Импортируем необходимые библиотеки
# Импортируем необходимые библиотеки
import numpy as np  # numpy для математических операций и работы с массивами

# ## В коде используются две ключевые библиотеки. Импорт необходимых библиотек
# <p>numpy - библиотека для научных вычислений</p>
# <p>matplotlib библиотека для создания визуализаций</p>

# # Эскейп последовательность
# \_\_init\_\_.py 
#
# ![image.png](attachment:image.png)

print("hello \nWorld")

# # Ключевые моменты:
#
# Биномиальное распределение моделирует количество успехов в последовательности независимых испытаний
#
# Параметры n и p определяют форму распределения
#
# Визуализация помогает понять характер распределения данных

# # Показаны два способа построения гистограммы:
# ## Детальная настройка:

# +
# Задаем параметры биномиального распределения
n_ = 10  # n_ - количество испытаний (например, 10 подбрасываний монеты)
p_ = 0.5  # p_ - вероятность успеха в каждом испытании (0.5 = 50%)
size = 1000  # количество экспериментов

# Генерируем случайные числа по биномиальному распределению
dist = np.random.binomial(n=n_, p=p_, size=size)

# Создаем новую фигуру с заданным размером
plt.figure(figsize=(10, 6))

# Строим гистограмму
plt.hist(
    dist,  # наши данные
    bins=np.arange(np.min(dist), np.max(dist) + 2),
    align="left",  # выравнивание столбцов по левому краю
    edgecolor="black",  # цвет границ столбцов
    color="skyblue",  # цвет заливки столбцов
    rwidth=0.8,  # ширина столбцов (0.8 = 80% от доступного пространства)
)

# Настраиваем заголовок и подписи осей
plt.title("Биномиальное распределение", fontsize=12, pad=15)
plt.xlabel("Число успехов", fontsize=10)
plt.ylabel("Частота", fontsize=10)

# Добавляем сетку для лучшей читаемости
plt.grid(True, alpha=0.3, linestyle="--")

# Настраиваем диапазон оси X
plt.xlim(np.min(dist) - 0.5, np.max(dist) + 1.5)

# Добавляем текстовое поле с параметрами распределения
plt.text(
    0.95,  # x-координата текста (0.95 = 95% от ширины графика)
    0.95,  # y-координата текста (0.95 = 95% от высоты графика)
    f"n = {n_}\np = {p_}\nsize = {size}",  # сам текст
    transform=plt.gca().transAxes,
    verticalalignment="top",
    horizontalalignment="right",
    bbox={"boxstyle": "round", "facecolor": "white", "alpha": 0.8},
)

# Автоматически настраиваем отступы
plt.tight_layout()

# Отображаем график
plt.show()
# -

# ## Простой вариант:

plt.hist(dist)
plt.show()

# # Пояснения к параметрам функций
#
# ## numpy функции
# <p> np.random.binomial()</p>
# <p>n: целое число ≥ 0 (количество испытаний)</p>
# <p>p: число в интервале [0,1] (вероятность успеха)</p>
# <p>size: размер выходного массива (количество генерируемых чисел)</p>
#
# ## matplotlib функции
# <p> plt.hist()</p>
# <p> bins: определяет границы столбцов гистограммы</p>
# <p> align: способ выравнивания столбцов ('left', 'mid', 'right')</p>
# <p> edgecolor: цвет границ столбцов</p>
#
# ## Дополнительные функции
#
# | Функция | Описание |
# |---------|----------|
# | plt.title() | задает заголовок графика |
# | plt.xlabel() | подпись оси X |
# | plt.ylabel() | подпись оси Y |
# | plt.show() | отображает график |
