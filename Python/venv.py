"""Part about venv."""

# ### Команды для работы с виртуальными окружениями в Python
#
# ### 1. Команда `python -m venv venv`
# Создает в папке проекта папку с виртуальным окружением.
#
# #### 1.1 Команды для работы с `pip`
# - `pip list` — выводит список и версии всех пакетов Python, которые установлены в текущей среде.
# - `pip freeze > requirements.txt` — записывает список всех установленных пакетов с их версиями в файл `requirements.txt`.
# - `pip install -r requirements.txt` — устанавливает все пакеты из файла `requirements.txt`.
#
# ### 2. Команды для работы с `conda`
# - `conda env list` — выводит список всех сред Conda, созданных на компьютере.
# - `conda create -n env_name python=3.5` — создает новую среду Conda с именем `env_name` и устанавливает в ней Python версии 3.5.
# - `conda env update -n env_name -f file.yml` — обновляет среду Conda с именем `env_name` на основе файла `file.yml`. Файл `file.yml` должен содержать описание среды, включая пакеты и их версии. Флаг `-n` указывает имя среды, а `-f` — файл, содержащий описание среды.
# - `source activate env_name` — активирует среду Conda с именем `env_name`. В Windows используется команда `conda activate env_name`.
# - `source deactivate` — деактивирует текущую среду Conda и возвращает вас к базовой среде. В Windows используется команда `conda deactivate`.
# - `conda clean -a` — удаляет все пакеты, которые больше не используются в любой среде Conda, а также очищает кэш пакетов. Флаг `-a` означает "all" и указывает на то, что необходимо удалить все неиспользуемые пакеты и очистить весь кэш.
#
# ### 3. Активация окружений
# Вставьте скрин вашего терминала, где вы активировали сначала `venv`, потом `conda`, назовите окружение "SENATOROV".
#
# ![image.png](attachment:image.png)
# ![image-2.png](attachment:image-2.png)
#
# ### 4. Установка пакетов в виртуальное окружение
# - **conda**:
#   - conda create -n SENATOROV python=3.13
#   - conda activate SENATOROV
# - **venv**:
#   - python -m venv SENATOROV
#   - SENATOROV\Scripts\activate
#   - pip install -r requirements.txt
#
# ### 5. Экспорт зависимостей
# - `pip freeze > requirements.txt` — записывает список всех установленных пакетов с их версиями в файл `requirements.txt`.
# - `conda env export > environment.yml` — экспортирует текущую среду Conda в файл `environment.yml`. Этот файл содержит полное описание среды, включая все установленные пакеты и их версии.
#
# #### 5.1 Пример выполнения команды
# ![image-3.png](attachment:image-3.png)
#
# ### 6. Установка зависимостей из файлов
# - `pip install -r requirements.txt` — устанавливает все зависимости (библиотеки и пакеты), перечисленные в файле `requirements.txt`.
# - `conda env create -f environment.yml` — создает виртуальное окружение с помощью Conda на основе файла `environment.yml`.
#
# ### 7. Информация о пакетах
# - `pip list` — выводит список всех пакетов, установленных в текущем Python-окружении, вместе с их версиями.
# - `pip show` — выводит подробную информацию о конкретном установленном пакете.
# - `conda list` — выводит список всех пакетов, установленных в текущем Conda-окружении.
#
# ### 8. Сравнение `venv/pip` и `conda`
# - **Количество пакетов**: Пакетов больше в `venv`. Однако в Conda есть свой репозиторий с пакетами для многих языков программирования, что делает ее более привлекательной для data scientists при разработке сложных проектов. Кроме того, Conda сама управляет зависимостями.
#
# ### 9. Пример выполнения команды
# ![image-4.png](attachment:image-4.png)
#
# ### 11. Зачем нужно виртуальное окружение?
# - Изолирует зависимости.
# - Обеспечивает легкость переноса проекта.
# - Управляет версиями Python.
#
# ### 12. Ответ
# ДА
